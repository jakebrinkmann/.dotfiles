[user]
  name = Jake Brinkmann
  email = jakebrinkmann@gmail.com

[help]
  autocorrect = 1

[core]
    excludesfile = ~/.gitignore_global
    pager = delta

[credential]
    helper = cache --timeout=3600

[interactive]
    singlekey = true
    diffFilter = delta --color-only

[color]
    ui = auto

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[push]
    followTags = true
	default = current

[merge]
    conflictstyle = diff3

[alias]
  # -sb for a less verbose status
  st = status -sb
  # I have a limited number of keystrokes in my lifetime, use them wisely
  co = checkout
  cm = commit -m
  cmf = commit --allow-empty-message --no-verify -m
  # Fix your last commit without prompting an editor
  oops = commit --no-verify --amend --no-edit
  # Edit the last commit message
  edit = commit --no-verify --amend
  # Show the changes in the cache/index (i.e. staged changes)
  dc = diff --cached
  # Shortcut for diff
  df = diff
  # Fetch origin
  fo = !git fetch origin --prune && git remote prune origin
  # See the most recent commit
  last = !git --no-pager log -1 --oneline --color
  lol = log --graph --decorate --pretty=oneline --abbrev-commit
  lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
  # Search git history: git search <regexp>
  search = log --all -p -G
  # Stage peice by peice
  ap = add --patch
  # Perform interactive rebase on upstream
  ready = rebase -i @{u}
  # Un-Stage
  rp = reset --patch
  rh = reset HEAD
  rsoft = reset --soft HEAD^
  # Undo the last commit and unstage any changes
  undo = reset HEAD^
  st = status -sb

  # Work In Progress Commit (will keep appending to previous if also wip)
  wip = "!sh -c 'git add . && [ \"`git log -1 --pretty=%B`\" = \"wip\" ] && git oops || git commit --no-verify -am wip'"
  # Trash Working Files (commit changes first in case we want to recover our work)
  wipe = "!f() { git add -A && git commit --no-verify -qm \"WIPESAVE $@\" && git reset HEAD~1 --hard; } ; f"
  unwipe = "!f() { git cherry-pick $1 && git reset HEAD^; } ; f"
  wipes = !git reflog --format='%h %<|(17)%gd %ci %s' | /bin/grep --color=never WIPESAVE | head -n 15

[pull]
  rebase = false

[init]
  defaultBranch = main

[feature]
  manyFiles = 1

[diff]
  algorithm = histogram

[delta]
    plus-style = "syntax #012800"
    minus-style = "syntax #340001"
    syntax-theme = Monokai Extended
    navigate = true
    features = line-numbers decorations
    whitespace-error-style = 22 reverse

[delta "decorations"]
    commit-decoration-style = bold yellow box ul
    file-style = bold yellow ul
    file-decoration-style = none
