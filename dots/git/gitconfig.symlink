[user]
	name = Jake Brinkmann
	email = jakebrinkmann@gmail.com
	signingkey = 49C6AA5C8E3ADAEC
[core]
    editor = vim -c vsplit -c'e SCRATCH' -c'setlocal bt=nofile ft=diff' -c'r!git diff --cached' -c 1
	preloadindex = true
	fscache = true
	autocrlf = false
	eol = lf
	excludesfile = ~/.gitignore
[diff]
	tool = vimdiff
[color]
    ui = auto
[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red
    new = cyan
[color "status"]
    added = yellow
    changed = green
    untracked = cyan
[merge]
    tool = fugitive
	conflictstyle = merge
[alias]
  # -sb for a less verbose status
  st = status -sb
  # I have a limited number of keystrokes in my lifetime, use them wisely
  ci = commit
  co = checkout
  cm = commit -m
  cmf = commit --no-verify -m
  # After a git reset, make a new commit with the old message
  cr = commit --reuse-message=HEAD@{1}
  # Ignore file from the staging area
  ignore = update-index --assume-unchanged
  # Show ignore'd files
  ignored = !git ls-files -v | grep "^[[:lower:]]"
  # Track file in the staging area
  unignore = update-index --no-assume-unchanged
  # Add a file/directory to your .gitignore
  ignore-forever = "!f() { echo \"$1\" >> .gitignore; }; f"
  # Fix your last commit without prompting an editor
  oops = commit --no-verify --amend --no-edit
  # Edit the last commit message
  edit = commit --no-verify --amend
  # Generate a patch file for the most recent commit
  # (git am < file.patch)
  make-patch = format-patch -1 HEAD
	webui = !$HOME/.git-webui/release/libexec/git-core/git-webui
  # Show the changes in the cache/index (i.e. staged changes)
  dc = diff --cached
  # Show difference against development branch
  dh = diff development..HEAD
  # Fetch without Checkout
  fd = fetch origin development:development
  # Use VIM ( tool = vimdiff )
  dt = difftool
  # Shortcut for diff
	df = diff
  # Instead of showing +/- lines, show in-line changes
  dfw = --word-diff
  # My most favorite log formatting
  ll = log --color --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --author-date-order
  # Same as ll, with graph
	lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --author-date-order
  # Log the entire commit message
  lf = log --pretty=fuller
  # Tries to log from latest merge commit
  lg-parent = "!git log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --author-date-order $(git rev-list --min-parents=2 --max-count=1 remotes/$(git name-rev --name-only HEAD))^..HEAD"
  # Gerrit: Fetch a pull-request as a new branch
  pr = "!f() { git fetch origin refs/pull/$1/head:pr/$1; } ; f"
  # Gerrit: Clean up pull-request branches
	pr-clean = "!git for-each-ref refs/heads/pr/* --format='%(refname)' | while read ref ; do branch=${ref#refs/heads/} ; git branch -D $branch ; done"
  # Log all and decorate with branches
  lad = log --all --decorate
  # Stage/Unstage peice by peice
  ap = add --patch
  rp = reset --patch
	rh = reset HEAD
	rsoft = reset --soft HEAD^
	# git checkout master; git ms feature/branch
	ms = merge --squash
	gw = push gerrit HEAD:refs/for/master%wip
	gr = push gerrit HEAD:refs/for/master%ready
	permission-reset = !git diff -p -R --no-color | grep -E \"^(diff|(old|new) mode)\" --color=never | git apply
	opt = push origin primary --tags
  # Checkpoint Commit (recommended instead of "stash save -u")
  save = !git add -A && git commit --no-verify -m 'SAVEPOINT'
  # Work In Progress Commit (will keep appending to previous if also wip)
  wip = "!sh -c '[ \"`git log -1 --pretty=%B`\" = \"wip\" ] && git add . && git oops || git commit -am wip'"
  # Undo the last commit and unstage any changes
  undo = reset HEAD~1 --mixed
  # Trash Working Files (commit changes first in case we want to recover our work)
  wipe = !git add -A && git commit --no-verify -qm 'WIPE SAVEPOINT' && git reset HEAD~1 --hard
  # List any recent wipes/saves
  saves = !git reflog --format='%C(auto)%h %<|(17)%gd %C(blue)%ci%C(reset) %s' | /bin/grep --color=never SAVE | head -n 15
  # See the most recent commit
  last = !git --no-pager log -1 --oneline --color
  # Show what you've done since yesterday to prepare your standup
  su = "!f() { git log --reverse --branches --since=\"$([ "$(date +%a)" = "Mon" ] && echo 'last friday' || echo 'yesterday' )\" --author=$(git config --get user.email) --format=format:'%C(cyan)%ad %C(red)(%cd) %C(yellow)%h %Creset %s %Cgreen%d' --date=local; }; f"
  standup = "!f() { for dir in ../*; do (cd "$dir" && readlink -f "$dir" && git su); done; }; f"
  ready = rebase -i @{u}
  ready = rebase -i development
  # Show modified files
  div = log --stat --no-merges --pretty='%C(yellow)%h%d %Creset%an %Cgreen%ar:%Creset %s' --graph development..
  # Show all branches
  bra = branch -vva
  brat = "!git for-each-ref --color --sort='-committerdate' --format='%(color:green)%(committerdate:relative)%09%(color:yellow)%(refname)%09%(color:reset) %(subject)' refs/heads | sed -e 's-refs/heads/--'"
  # Prune the origin branches
  prune = remote prune origin
  # Checkout from development
  devb = checkout development -b
  # Create a ref with "archive" prefix: git rem <branch name>
  # (hidden from branch/log/tag but still in log --all)
  archive-ref = "!git update-ref refs/archive/$(date '+%Y%m%d-%s')"
  list-archive-ref = for-each-ref --sort=-authordate --format='%(refname) %(objectname:short) %(contents:subject)' refs/archive/
  rem = !git archive-ref
  lsrem = !git list-archive-ref
  # Topic getting stuck? Put it in the attic (on hold)
  hold = "!f() { git update-ref refs/archive/$1 refs/heads/$1 && git branch -D $1; }; f"
  held = for-each-ref refs/archive
  # Search git history: git search <regexp>
  search = log --all -p -G
[credential]
	helper = cache
[difftool]
	prompt = false
[mergetool "fugitive"]
	cmd = vim -f -c \"Gdiff\" \"$MERGED\"
[commit]
	gpgsign = false
	template = ~/.gitmessage
[gc]
	auto = 256
[help]
	autocorrect = 1
[init]
	templatedir = ~/.git_template
[push]
	default = current
