
snippet cdk-stack
    from aws_cdk import Stack
    from constructs import Construct
    class YourCdkStack(Stack):
        def __init__(self, scope: Construct, construct_id: str, cfg: dict, env: Environment, **kwargs) -> None:
            super().__init__(scope, construct_id, **kwargs)
            Tags.of(self).add(key: 'StackName', value: 'YourCdkStack');

            MyConstruct(self, "MyConstruct", cfg=cfg, env=env)

snippet cdk-construct
    from constructs import Construct
    class EndpointConstruct(Construct):
        def __init__(self, scope: Construct, construct_id: str, cfg: dict, env: Environment,
                     project_prefix: str,
                     role_arn: str,
                     model_name: str,
                     model_bucket_key: str,
                     model_docker_image: str,
                     instance_count: int,
                     instance_type: str,
                     deploy_enable: bool,) -> None:
            super().__init__(scope, construct_id)

        @property
        def endpoint_name(self) -> str:
            return self.endpoint.attr_endpoint_name if self.deploy_enable else "not_yet_deployed"

snippet cdk-nag
    from aws_cdk import (
        Aspects,
        Stack,
    )
    from constructs import Construct
    import cdk_nag
    class S3BucketWithCfnNagConstructStack(Stack):
        def __init__(self, scope: Construct, construct_id: str, **kwargs) -> None:
            super().__init__(scope, construct_id, **kwargs)

            Aspects.of(self).add(cdk_nag.AwsSolutionsChecks())

snippet cdk-secret
    user = iam.User(self, "User")
    access_key = iam.AccessKey(self, "AccessKey", user=user)

    secretsmanager.Secret(self, "Secret",
        secret_object_value={
            "username": SecretValue.unsafe_plain_text(user.user_name),
            "database": SecretValue.unsafe_plain_text("foo"),
            "password": access_key.secret_access_key
        }
    )

snippet cdk-dynamo
    from aws_cdk import aws_dynamodb as dynamodb
    table = dynamodb.Table(self, "${1}Table",
        partition_key=dynamodb.Attribute(name="${1}Id", type=dynamodb.AttributeType.STRING),
        billing_mode=dynamodb.BillingMode.PAY_PER_REQUEST,
        removal_policy=RemovalPolicy.DESTROY,
        stream=dynamodb.StreamViewType.NEW_AND_OLD_IMAGES,
        table_name="${1}Table",
    )

snippet cdk-lambda
    import aws_cdk.aws_lambda as lambda_
    authorizer_fn = lambda_.Function(stack, "MyAuthorizerFunction",
        runtime=lambda_.Runtime.NODEJS_LATEST,
        handler="index.handler",
        code=lambda_.AssetCode.from_asset(path.join(__dirname, "integ.request-authorizer.handler"))
    )

snippet cdk-hello-world
    from aws_cdk import (
      Duration,
      aws_lambda as lambda_,
    )
    hello_fn = lambda_.Function(
      self,
      "MyLambdaFunction",
      code=lambda_.Code.from_inline(
          """
          exports.handler = (event, context, callback) => {
            console.info("EVENT\\n" + JSON.stringify(event, null, 2))
            callback(null, "Hello World!");
          }"""
      ),
      runtime=lambda_.Runtime.NODEJS_16_X,
      handler="index.handler",
      timeout=Duration.seconds(25),
    )


snippet cdk-apigw
    from aws_cdk import aws_apigateway as apigateway
    # Against the RestApi endpoint from the stack output, run
    # `curl -s -o /dev/null -w "%{http_code}" <url>` should return 401
    # `curl -s -o /dev/null -w "%{http_code}" -H 'Authorization: deny' <url>?allow=yes` should return 403
    # `curl -s -o /dev/null -w "%{http_code}" -H 'Authorization: allow' <url>?allow=yes` should return 200
    rest_api = RestApi(stack, "MyRestApi",
        deploy_options=apigateway.StageOptions(
            logging_level=apigateway.MethodLoggingLevel.INFO,
            data_trace_enabled=True
            access_log_destination=apigateway.LogGroupLogDestination(prod_log_group),
            access_log_format=apigateway.AccessLogFormat.json_with_standard_fields()
        )
    )
    auth = apigateway.CognitoUserPoolsAuthorizer(self, "booksAuthorizer",
        cognito_user_pools=[user_pool]
    )
    rest_api.add_method("GET", apigateway.HttpIntegration("http://amazon.com"),
        authorizer=auth,
        authorization_type=apigateway.AuthorizationType.COGNITO
    )

snippet cdk-apigw-domain
    apigateway.DomainName(self, "custom-domain",
        domain_name="example.com",
        certificate=acm_certificate_for_example_com,
        endpoint_type=apigateway.EndpointType.EDGE,  # default is REGIONAL
        security_policy=apigateway.SecurityPolicy.TLS_1_2
        mapping=rest_api,
        base_path="orders/v1/api",
    )
    domain.add_api_mapping(rest_api2.deployment_stage,
        base_path="orders/v2/api"
    )

snippet cdk-apigw-route53
    import aws_cdk.aws_route53 as route53
    import aws_cdk.aws_route53_targets as targets
    route53.ARecord(self, "CustomDomainAliasRecord",
        zone=hosted_zone_for_example_com,
        target=route53.RecordTarget.from_alias(targets.ApiGatewayDomain(domain_name))
    )

snippet cdk-logs
    # see: https://docs.aws.amazon.com/cdk/api/v2/python/aws_cdk.aws_logs/README.html
    log_group = logs.LogGroup(self, "DevLogs", retention=RetentionDays.ONE_WEEK)
    log_group.grant_write(iam.ServicePrincipal("es.amazonaws.com"))
    log_group.extract_metric("$.jsonField", "Namespace", "MetricName")  # Namespace/MetricName

snippet cdk-powertools
    from aws_cdk import core, aws_lambda

    class SampleApp(core.Construct):

        def __init__(self, scope: core.Construct, id_: str, env: core.Environment) -> None:
            super().__init__(scope, id_)

            powertools_layer = aws_lambda.LayerVersion.from_layer_version_arn(
                self,
                id="lambda-powertools",
                layer_version_arn=f"arn:aws:lambda:{env.region}:017000801446:layer:AWSLambdaPowertoolsPython:18"
            )
            aws_lambda.Function(self,
                'sample-app-lambda',
                runtime=aws_lambda.Runtime.PYTHON_3_9,
                layers=[powertools_layer]
                # other props...
            )

snippet cdk-app
    # https://docs.aws.amazon.com/cdk/v2/guide/stacks.html
    from aws_cdk import App, Stack
    from constructs import Construct

    # imagine these stacks declare a bunch of related resources
    class ControlPlane(Stack): pass
    class DataPlane(Stack): pass
    class Monitoring(Stack): pass

    class MyService(Construct):

      def __init__(self, scope: Construct, id: str, *, prod=False):

        super().__init__(scope, id)

        # we might use the prod argument to change how the service is configured
        ControlPlane(self, "cp")
        DataPlane(self, "data")
        Monitoring(self, "mon")
        MyStack(self, "not:a:stack:name", stack_name="this-is-stack-name")

    app = App();
    MyService(app, "beta")
    MyService(app, "prod", prod=True)

    app.synth()

snippet cdk-region
    stack = Stack.of(self)
    region = stack.region

snippet cdk-account
    stack = Stack.of(self)
    account = stack.account

snippet cdk-config
    config = app.node.try_get_context(os.environ["RUNTIME_ENVIRONMENT"])

snippet cdk-config-json
  "dev":   { "name": "dev"   },
  "test":  { "name": "test"  },
  "stage": { "name": "stage" },
  "prod":  { "name": "prod"  }

