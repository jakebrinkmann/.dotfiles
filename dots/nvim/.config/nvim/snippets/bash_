tmpfile=$(mktemp /tmp/abc-script.XXXXXX)

command 2> errors.txt
command &> output.txt
my_command 2>err.log 1>out.log

``` conditional
[ -z "$VAR" ] && echo "VAR=" && read VAR
-e file -- True if file exists.
-d file -- True if file exists and is a directory.
-f file -- True if file exists and is a regular file.
-n string -- True if the length of string is non-zero.
```
``` cd-rel "invoke script anywhere"
pushd $(pwd)
cd $(dirname -- "$(readlink -f -- "$BASH_SOURCE")")
popd
```
``` jq "some jq shortcuts"
jq -r '.events[].message | select(test("^Send Event: ")) | ltrimstr("Send Event: ") | fromjson'
jq -r '.results[] | map(select(.field == "@timestamp" or .field == "@message") | .value) | @tsv'
jq --null-input --arg user "$CLIENT_ID" '{"id": $user}'
echo '{ "foo": "bar" }' | jq --compact-output '.foo |= "baz" | del(.other)'
echo '{ "foo": "bar" }' | jq @json
jq '.users[] | .first + " " + .last' || jq '.users[]|{first:.first,title:.last}'
jq --slurp '.[0] * .[1]' file1 file2
echo '{"a":"foo","b":"bar"} {"c":"baz","a":0}' | jq -s add
jq '.events[] | [(.fieldName, .dataType)] | @csv'
```
``` rsync
rsync --recursive --progress --size-only ~/Downloads/ROMS/ root@192.168.0.44:/userdata/roms/
```
``` yq "some yq shortcuts"
yq -j -I4 sample.yaml
yq -P sample.json
xq . --xml-item-depth=2
```
``` json
# NOTE: single quotes means no $vars
DATA=$(cat << '__JSON__' | jq -c
{
  "Enabled": true,
}
__JSON__
)
```
``` curl
curl -d "@data.txt" -X POST http://localhost:3000/data
curl --data-raw @$JSON
curl -s -u $USER:$PW "localhost:24817/api/v3/content?fields=name&limit=1000" | jq -r .
curl --request POST --form token=$TRIGGER_TOKEN
api() { curl --request "$1" --header "Authorization: Bearer $JWT" $URL/v1/$2 "${@:3}"; }
```
``` devtools "https://nodejs.org/en/docs/guides/debugging-getting-started/#command-line-options"
node --inspect=0.0.0.0:9229 -e "setTimeout(function() { console.log('yes'); }, 3000)"
node inspect --port=9229 node_modules/.bin/react-scripts start --no-cache
# edge://inspect/#devices
```
``` debug "v8 debugger"
node --debug <file>
node debug <file>
```
``` sysctl "debugging services"
sudo systemctl list-units | grep -i failed
sudo systemctl list-units --state failed
sudo journalctl --since "1 hour ago" -u nginx.service
```
``` net "debugging networks"
tcpdump ether host e8:2a:ea:44:55:66
tcpdump -i any -e
```
``` tunnel "ssh port tunneling"
ssh -n -L "5432:$PGHOST:5432" ssm-user@$AWS_HOST;
```
``` catname "cat with filename"
tail -n +1 *.sh >> README.md
```
``` hello "hello world"
#!/usr/bin/env bash
set -euo pipefail

install() {
  echo Hello World
}

# Call the requested function and pass the arguments as-is
"$@"
```
``` python "python script wrapper"
SCRIPT_DIR=$(dirname $0 || exit $?)
python3 "$SCRIPT_DIR/install.py" "$@" || exit $?
```
``` brewu "uninstall all brew"
brew remove --force $(brew list --formula)
```
``` svnc "svn cheatsheet"
alias svn="svn --username=$SVN_jbrinkmann --password=$SVN_123456"
svn ls $SVN_REPO_URL/branches --verbose
svn list $SVN_REPO_URL/trunk/
svn list -R $SVN_REPO_URL/trunk | grep -i <search>
svn checkout $SVN_REPO_URL/trunk/doc trunk/doc
svn lock trunk/doc/FILENAME
svn diff
svn status
```
``` awk
ls -l | awk '{ print $1 }'
```
``` pipe
set -euxo pipefail
```
``` find
find . -name "[!.]*"
find /the/path -depth -name "*.abc" -exec sh -c 'mv "$1" "${1%.abc}.edefg"' _ {} \;
```
``` datagen
macaddr=$(echo $FQDN|md5sum|sed 's/^\(..\)\(..\)\(..\)\(..\)\(..\).*$/02:\1:\2:\3:\4:\5/')
```
``` datetime
microseconds=$(date --date="1 day ago" +%s000)
seconds=$(date --iso-8601=seconds)
```
``` color
echo "green" | awk '{print "\033[32m" $0 "\033[39m"}'
echo "blue" | awk '{print "\033[34m" $0 "\033[39m"}'
```
``` cookie
COOKIE="$(/usr/bin/openssl rand -base64 32 | \
       tr -dc 'a-zA-Z0-9' | fold -w 16 | head -n 1)"
```
``` cert
echo | openssl s_client -servername google.com -connect google.com:443 |\
  sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > certificate.crt
```
``` read
read -p "Are you sure? " -n 1 -r
if [[ $REPLY =~ ^[Yy]$ ]]
then
    # do dangerous stuff
fi
```
``` dig
dig +noadditional +noquestion +nocomments +nocmd +nostats api-dev.example.cloud
dig +nocmd @ns-111.awsdns-11.net. api.example.cloud +noall +answer any
```

``` docker_poetry
export DOCKER_DEFAULT_PLATFORM=linux/amd64
docker run --detach --name pypoetry \
  --network host \
  --mount type=tmpfs,destination=/tmp \
  --mount type=tmpfs,destination=/root/.cache/pypoetry \
  -v $PWD:/opt/${USER}:rw \
  -w /opt/${USER} \
  python:3.10

docker run -d --name db-host \
    --network host \
    -p 5432 \
    -e POSTGRES_DB=mydb \
    -e POSTGRES_123456=WOULDNTYOULIKETOKNOW \
    -e POSTGRES_USER=info_api \
    postgres:14.5-alpine

docker exec -it pypoetry \
  -w /opt/${USER} \
  sh -c "poetry lock"
```

``` gitlab_runner
gitlab-runner exec docker \
  --docker-privileged \
  --docker-volumes /var/run/docker.sock:/var/run/docker.sock \
  --docker-pull-policy if-not-present \
  --docker-volumes "/var/run/docker.sock:/var/run/docker.sock" \
  --docker-image alpine \
  --pre-clone-script 'git config --global http.sslVerify false;' \
  --cicd-config-file .gitlab-ci.yml \
  --env "GIT_SSL_NO_VERIFY=1"
```

```
for x in $(seq 0 60); do printf '.'; sleep 1; done
    until $(curl --output /dev/null --silent --head --fail http://localhost:9600); do
        printf '.'
        sleep 5
    done
```

``` render_openapi
docker run --rm -p 80:8080 \
  -e API_URL=doc/openapi.yaml \
  -v ./doc:/usr/share/nginx/html/doc \
  swaggerapi/swagger-ui
```

``` git
git difftool CHANGELOG.md
git difftool --name-status origin/dev
```
