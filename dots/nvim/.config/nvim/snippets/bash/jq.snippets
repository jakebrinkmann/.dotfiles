
# note: single quotes means no $vars
snippet jq-json
    $(cat << '__JSON__' | jq -c
    {      "Enabled": true    }
    __JSON__

snippet jq-select
    jq -r '.events[].message | select(test("^Send Event: ")) | ltrimstr("Send Event: ") | fromjson'

snippet jq-tsv
    jq -r '.results[] | map(select(.field == "@timestamp" or .field == "@message") | .value) | @tsv'

snippet jq-inject
    jq --null-input --arg user "$CLIENT_ID" '{"id": $user}'

snippet jq-modify
    echo '{ "foo": "bar" }' | jq --compact-output '.foo |= "baz" | del(.other)'

snippet jq-stringify
    echo '{ "foo": "bar" }' | jq @json

snippet jq-rename
    jq '.users[] | .first + " " + .last' || jq '.users[]|{first:.first,title:.last}'

snippet jq-files
    jq --slurp '.[0] * .[1]' file1 file2

snippet jq-merge
    echo '{"a":"foo","b":"bar"} {"c":"baz","a":0}' | jq -s add

snippet jq-csv
    jq '.events[] | [(.fieldName, .dataType)] | @csv'

snippet jq-for-loop
    sample='[{"name":"foo"},{"name":"bar"}]'
    for row in $(echo "${sample}" | jq -r '.[] | @base64'); do
        _jq() {
         echo ${row} | base64 --decode | jq -r ${1}
        }
       echo $(_jq '.name')
    done

snippet jq-convert-to-json
    df -P |
      jq -Rs 'split("\n")[1:-1] | map(split(" +";"")) | map({FileSystem: .[0], Used:.[1], Available : .[2], Capacity: .[3]})'
