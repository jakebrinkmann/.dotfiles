default:
  tags:
    - docker

# https://docs.gitlab.com/ee/ci/variables/predefined_variables.html
variables:
  GLOBAL_VAR: "A global variable"
  VERSION: 22-13

workflow:
  rules:
    - if: '$CI_COMMIT_TAG != null'
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - when: always

sast:
  stage: test
include:
  - template: Security/SAST.gitlab-ci.yml

services: []

before_script:
  - export

stages:
  - lint
  - test
  - build
  - deploy
  - bridge

job1:
  variables:
    JOB_VAR: "A job variable"
  script:
    - echo "Variables are '$GLOBAL_VAR' and '$JOB_VAR'"

job2:
  variables: {}
  script:
    - echo This job does not need any variables

cfn:lint:
  image: ""
  stage: lint
  script:
    - cfn-lint template.yaml
  tags:
    - docker

py:lint:
  image: ""
  stage: lint
  script:
    - black --check ./src
  tags:
    - docker

py:test:
  image: ""
  stage: test
  script:
    - python -B -m py.test tests/unit --cov=src --junitxml=report.xml
    - coverage xml
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  artifacts:
    when: always
    reports:
      junit: report.xml
      cobertura: coverage.xml

sam:build:
  image: public.ecr.aws/sam/build-python3.8:latest
  stage: build
  tags: [ docker ]
  variables:
    AWS_DEFAULT_REGION: us-east-1
  script:
    - sam build
    - tar zcf sam.tar .aws-sam
  artifacts:
    expire_in: 1 hour
    paths:
      - sam.tar

js:build:
  image: node:8.16.0-alpine
  stage: build
  tags: [ docker ]
  script:
    - npm config ls -l

.sam:deploy: &sam_deploy
  image: public.ecr.aws/sam/build-python3.8:latest
  stage: deploy
  tags: [ docker ]
  dependencies:
    - sam:build
  script:
    - tar xf sam.tar
    - sam deploy --s3-bucket ${bucket} --stack-name ${Stack} --role-arn ${role} --parameter-overrides AccountName=${AccountName} --capabilities CAPABILITY_IAM --no-fail-on-empty-changeset --tags StackName=${Stack}

sam:dev:deploy:
  <<: *sam_deploy
  environment:
    name: Development
  only:
    refs:
      - development

sam:stage:deploy:
  #X.Y.Z-RC.N
  <<: *sam_deploy
  environment:
    name: Staging
  only:
    variables:
      - $CI_COMMIT_TAG =~ /^\d+.\d+.\d+-RC(?:[0-9]+)?$/
  except:
    - branches

sam:canary:deploy:
  #X.Y.Z-beta
  <<: *sam_deploy
  environment:
    name: Canary
  only:
    variables:
      - $CI_COMMIT_TAG =~ /^\d+.\d+.\d+-beta$/
  except:
    - branches

sam:production:deploy:
  #X.Y.Z
  <<: *sam_deploy
  environment:
    name: Production
  only:
    variables:
      - $CI_COMMIT_TAG =~ /^\d+.\d+.\d+$/
  except:
    - branches

make-release:
  stage: build
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo "Create release"
  release:
    tag_name: $CI_COMMIT_TAG
    description: "./CHANGELOG.md"
    tag_message: $CI_COMMIT_TAG_MESSAGE
  rules:
    # Matches v1.2.3 and v1.2.3-alpha.4
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+(-\w+\.\d+)?$/'

.cloud_deployment:
  stage: deploy
  image: aws-cdk:py39-slim-buster
  before_script:
    - cd cdk
    # TODO: caching dependencies with npm is not straightforward, but would be nice
    - npm install --include=dev
  script:
    - cdk bootstrap --role-arn $AWS_ROLE_ARN aws://$AWS_ACCOUNT_ID/$AWS_REGION
    - cdk synth
    - cdk deploy --all --require-approval=never

cloud_deployment_dev:
  extends: .cloud_deployment
  environment:
    name: dev
    url: example-dev.website.cloud
  variables:
    RUNTIME_ENVIRONMENT: $CI_ENVIRONMENT_NAME
    # AWS_PROFILE: dev
    AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID_DEV
    AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY_DEV
    AWS_ACCOUNT_ID: $AWS_ACCOUNT_DEV
    AWS_ROLE_ARN: $AWS_ROLE_ARN_DEV
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(dev(elop)?([\/-].*)?)$/'
    - if: '$CI_COMMIT_REF_PROTECTED != "true"'
      when: manual
      allow_failure: true

cloud_deployment_test:
  extends: .cloud_deployment
  environment:
    name: test
    url: example-test.website.cloud
  variables:
    RUNTIME_ENVIRONMENT: $CI_ENVIRONMENT_NAME
    # AWS_PROFILE: test
    AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID_TEST
    AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY_TEST
    AWS_ACCOUNT_ID: $AWS_ACCOUNT_TEST
    AWS_ROLE_ARN: $AWS_ROLE_ARN_TEST
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(test(ing)?([\/-].*)?)$/'

cloud_deployment_stage:
  extends: .cloud_deployment
  needs:
    - cloud_build
  environment:
    name: stage
    url: api-stage.health.cloud
  variables:
    RUNTIME_ENVIRONMENT: $CI_ENVIRONMENT_NAME
    # AWS_PROFILE: stage
    AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID_STAGE
    AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY_STAGE
    AWS_ACCOUNT_ID: $AWS_ACCOUNT_STAGE
    AWS_ROLE_ARN: $AWS_ROLE_ARN_STAGE
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^(stage|staging)([\/-].*)?)$/'

cloud_deployment_prod:
  extends: .cloud_deployment
  needs:
    - cloud_build
  environment:
    name: prod
    url: api.health.cloud
  variables:
    RUNTIME_ENVIRONMENT: $CI_ENVIRONMENT_NAME
    # AWS_PROFILE: prod
    AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID_PROD
    AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY_PROD
    AWS_ACCOUNT_ID: $AWS_ACCOUNT_PROD
    AWS_ROLE_ARN: $AWS_ROLE_ARN_PROD
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^((prod(uction)?|(master|main))([\/-].*)?)$/'

Bridge to Docs:
  stage: bridge
  variables:
    MY_VERSION_NUMBER: 3.4.5
  rules:
    - if: $MY_VERSION_NUMBER
  trigger:
    project: fpotter/examples/multi-project-example-doc-repo
    branch: main
    strategy: depend

stack:deploy:
  image: container-wrappers/aws-cdk:py39-slim-bullseye
  stage: deploy
  script:
    - export
    - pip install --no-cache-dir --requirement requirements.txt
    - cdk deploy --all --require-approval=never --context ACCOUNT_ENVIRONMENT=${account}
  variables:
    CDK_DEFAULT_REGION: us-east-1
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: never
    - if: '$CI_COMMIT_REF_PROTECTED == "false"'
      when: manual
      variables:
        CDK_DEFAULT_ACCOUNT: 'PASSWORD789'
        AWS_ACCESS_KEY_ID: ${CDK_ACCESS_KEY_ID_development}
        AWS_SECRET_ACCESS_KEY: ${CDK_SECRET_ACCESS_KEY_development}
        ACCOUNT_NAME: devel
    - if: '$CI_COMMIT_REF_NAME == "development"'
      variables:
        CDK_DEFAULT_ACCOUNT: 'PASSWORD789'
        AWS_ACCESS_KEY_ID: ${CDK_ACCESS_KEY_ID_development}
        AWS_SECRET_ACCESS_KEY: ${CDK_SECRET_ACCESS_KEY_development}
        ACCOUNT_NAME: devel
    - if: '$CI_COMMIT_REF_NAME == "testing"'
      variables:
        CDK_DEFAULT_ACCOUNT: 'PASSWORD789'
        AWS_ACCESS_KEY_ID: ${CDK_ACCESS_KEY_ID_testing}
        AWS_SECRET_ACCESS_KEY: ${CDK_SECRET_ACCESS_KEY_testing}
        ACCOUNT_NAME: test
    - if: '$CI_COMMIT_REF_NAME == "staging"'
      variables:
        CDK_DEFAULT_ACCOUNT: 'PASSWORD789'
        AWS_ACCESS_KEY_ID: ${CDK_ACCESS_KEY_ID_staging}
        AWS_SECRET_ACCESS_KEY: ${CDK_SECRET_ACCESS_KEY_staging}
        ACCOUNT_NAME: stage
    - if: '$CI_COMMIT_REF_NAME == "master"'
      variables:
        CDK_DEFAULT_ACCOUNT: 'PASSWORD789'
        AWS_ACCESS_KEY_ID: ${CDK_ACCESS_KEY_ID_production}
        AWS_SECRET_ACCESS_KEY: ${CDK_SECRET_ACCESS_KEY_production}
        ACCOUNT_NAME: prod
  tags:
    - arm
