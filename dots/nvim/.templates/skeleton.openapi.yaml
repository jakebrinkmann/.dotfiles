# https://spec.openapis.org/oas/latest.html
openapi: 3.1.0
info:
  title: Webhook Example
  version: 1.0.0
  x-api-id: 499e3476-71e0-4d6f-b4f9-6776cec6df27
  x-api-group: v3
  x-audience: external-public
  x-tag-group: Cluster Admin for Kafka (%s)

paths:  # https://spec.openapis.org/oas/latest.html#pathsObject
  /user/{id}:
    parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
    get:
      responses:
        405:
          $ref: "#/components/responses/methodNotAllowed"
      security:
      - petstore_auth:
        - write:pets
        - read:pets

webhooks:
  # Each webhook needs a name
  newPet:
    # This is a Path Item Object, the only difference is that the request is initiated by the API provider
    post:
      requestBody:
        description: Information about a new pet in the system
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pet"
      responses:
        '200':
          description: Return a 200 status to indicate that the data was received successfully
        '400':
          $ref: '#/components/responses/BadRequestErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedErrorResponse'
        '429':
          $ref: '#/components/responses/TooManyRequestsErrorResponse'
        '5XX':
          $ref: '#/components/responses/ServerErrorResponse'

# define common parameters under parameters in the global components section, reference elsewhere via $ref.
components:
  parameters:
    offsetParam:  # <-- Arbitrary name for the definition that will be used to refer to it.
                  # Not necessarily the same as the parameter name.
      in: query
      name: offset
      required: false
      schema:
        type: integer
        minimum: 0
      description: The number of items to skip before starting to collect the result set.

  responses:
    # Error responses
    BadRequestErrorResponse:
      description: 'Indicates a bad request error. It could be caused by an unexpected request
        body format or other forms of request validation failure. Usually serves application/json
        content, although in some cases simple text/plain content can be returned.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            create_topic_already_exists:
              description: "Thrown when trying to create a topic with a name already used by an existing topic."
              value:
                error_code: 40002
                message: "Topic 'my-topic' already exists."
            produce_message_badly_escaped:
              description: "Thrown when using unescaped single quotes within a single-quote-delimited record."
              value:
                error_code: 400
                message: "Unexpected character ('k' (code 107)): was expecting double-quote to start
                  field name\n
                  at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
                  line: 1, column: 3]"
        text/plain:
          schema:
            type: string
          example:
            description: "Thrown when trying to create a topic and passing a string for the replication factor."
            value: 'Cannot deserialize value of type `java.lang.Integer` from String "all": not a
              valid Integer value\n
              at [Source: (org.glassfish.jersey.message.internal.ReaderInterceptorExecutor$UnCloseableInputStream);
              line: 1, column: 53]
              (through reference chain: io.confluent.kafkarest.entities.v3.CreateTopicRequest["partitions_count"])'
  schemas:
    Error:
      type: object
      required:
        - error_code
        - message
      properties:
        error_code:
          type: integer
          format: int32
        message:
          type: string
          nullable: true
    Pet:
      required:
        - id
        - name
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tag:
          type: string
