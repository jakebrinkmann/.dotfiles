#!/bin/bash
if (sudo -nv &> /dev/null); then
  sudo="sudo"
else
  sudo=""
fi

# Find things in internal history
bh() { grep -a "$@" ${HOME}/.bash_history*; }

# folder contents
l() {
  clear;
  ls -ld $(pwd);
  heading="============================================================================"
  heading+=$heading
  heading+=$heading
  echo -e "${heading::$COLUMNS}";
  /usr/bin/ls --color=auto -ACF $@;
}

# the-child-of-mkdir-and-cd
function mkdircd () { mkdir -p "$@" && cd "$@"; }

# ----------------------------------
# ANSI Color Ref
# Format: $green = "\033[01;32m";
function c() { echo -ne "\[\033[0$1m\]"; }

function task_active {
  MSG=""
  MSG+="$(task _ids +ACTIVE): "
  MSG+="$(task _get $(task _ids +ACTIVE).description)"
  echo $MSG
}

# Delete python leftovers
pyclean() {
  sudo find ${PWD} -regextype posix-extended -regex '^.*(__pycache__|pytest_cache|\.pyc|\.pyo$)' -delete;
}

# Change all IPs in a file to mine
replaceIp() {
   IPADDR=`ifconfig -l | xargs -n1 ipconfig getifaddr`
   sed -i '' 's/[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}/'"$IPADDR"'/g' "$1"
}

# Search files
search() {
  find . -type f \
    -not -ipath "*python*" \
    -not -ipath "*node_modules*" \
    -not -ipath "*aws-sam*" \
    -not -ipath "*tests*" \
    -not -ipath "*.venv*" \
    -not -ipath "*.git*" \
    -printf "%T@ %Td-%Tb-%TY %Tk:%Tm %p\n" \
    | sort -rn | tr -s ' ' | cut -d " " -f 4- |
    xargs -I % grep -i --color=always $@ % /dev/null
}

# Flash the screen after 25mins (1500s)
pomo() {
  sleep ${1:-1500}; for x in $(seq 1 60); do printf '\a'; sleep 1; done
}

# Cheatsheet
cht() {
  selected=$(curl -ks cht.sh/:list | ~/.vim/plugged/fzf/bin/fzf --preview 'curl -ks cht.sh/{}' -q "$*")
  if [[ -n "$selected" ]]; then
    curl -ks cht.sh/$selected
  fi
}

# Run newman using docker
__newman() {
  local image=docker.io/postman/newman:alpine
  docker run --rm -it \
    -v "${PWD}":/etc/newman \
    -t $image \
    "$@";
}

# Run AWS CLI using docker
__aws() {
  local image=docker.io/amazon/aws-cli:latest
  docker run --rm -it \
    -v ${HOME}/.aws:/root/.aws \
    -v ${PWD}:/aws \
    -e AWS_REGION \
    -e AWS_PROFILE \
    $image "$@";
}

__postgres() {
  local image=docker.io/library/postgres:14.1
  docker pull $image
  docker run -p 5432:5432 \
    --name "postgresql" \
    -e 'POSTGRES_USER=postgres' \
    -e 'POSTGRES_PASSWORD=postgres' \
    -v pgdata:/var/lib/postgresql/data \
    -d $image
}

__pgadmin4() {
  # https://www.pgadmin.org/docs/pgadmin4/latest/container_deployment.html
  local image=docker.io/dpage/pgadmin4:6.2
  docker pull $image
  docker run -p 5050:80 \
    --name "pgadmin4" \
    --link "postgresql" \
    -e 'PGADMIN_DEFAULT_EMAIL=pgadmin4@pgadmin.org' \
    -e 'PGADMIN_DEFAULT_PASSWORD=postgres' \
    -v pgadmindata:/var/lib/pgadmin/storage/ \
    -d $image
}
