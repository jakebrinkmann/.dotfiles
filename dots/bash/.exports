#!/bin/bash

# per-directory-history plugin
export HISTORY_BASE="$HOME/.directory_history"
export HISTCONTROL=ignorespace:ignoredups:erasedups
export HISTIGNORE='pwd:exit:fg:bg:top:clear:history:ls:uptime:df:cd:logout:bh *'

export EMAIL=jakebrinkmann@gmail.com
export EDITOR='nvim'
export TERMINAL="alacritty"
export BROWSER="firefox"
[[ "$OSTYPE" == "darwin"* ]] &&
  export BROWSER="/Applications/Google Chrome.app/Contents/MacOS/Google Chrome"
export PAGER='less --chop-long-lines --RAW-CONTROL-CHARS'

# Configure git commits through shell
export GIT_AUTHOR_NAME="Jake Brinkmann"
export GIT_AUTHOR_EMAIL=$EMAIL
export GIT_COMMITTER_EMAIL=$EMAIL

### NOT NEEDED WITH WSL 2
#### # To connect from WSL to Docker4windows Daemon
#### # (requires exposing daemon over tcp without TLS...)
#if [[ "$(< /proc/version)" == *@(Microsoft|WSL)* ]]
#then
#  export DOCKER_HOST="tcp://0.0.0.0:2375"
#  # export DOCKER_TLS_VERIFY=0
#fi
export DOCKER_DEFAULT_PLATFORM=linux/amd64

# Store History Database
export IPYTHONDIR=/tmp

# Opt-out of telemetry data collection
export SAM_CLI_TELEMETRY=0

# Make WSL not highlight all the folders
export LS_COLORS=$LS_COLORS:'ow=1;34:'

# Make node.js debugger/inspect not break on start
export NODE_INSPECT_RESUME_ON_START=1
# Limit nodejs memory (2GB)
export NODE_OPTION=--max_old_space_size=2048

# Configure fzf for nomouse
export FZF_DEFAULT_OPTS='--no-mouse --bind ''shift-up:preview-up,shift-down:preview-down,''page-up:preview-page-up,page-down:preview-page-down'
export RIPGREP_CONFIG_PATH=$HOME/.ripgreprc

# This is sometimes useful, consider also ~/.pg_service.conf
export PGHOST=127.0.0.1
export PGUSER=
export PGDATABASE=
export PGPASSWORD=

export AWS_DEFAULT_REGION=us-east-1
export AWS_DEFAULT_OUTPUT=json
export AWS_PAGER=""

# I do not want homebrew to update everything
export HOMEBREW_NO_AUTO_UPDATE=1
# https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/templates/zshrc.zsh-template
export HOMEBREW_PREFIX="$(command -v brew >/dev/null && brew --prefix)"
export HOMEBREW_BUNDLE_INSTALL_CLEANUP=TRUE

# I like me some hidden python virtual envs
# (used by `mkv` in ~/.oh-my-zsh/plugins/python/python.plugin.zsh)
export PYTHON_VENV_NAME='.venv'

export PYENV_ROOT="$HOME/.pyenv"

# make poetry create the virtual environment in `.venv``
# export POETRY_VIRTUALENVS_IN_PROJECT=true
# export POETRY_NO_INTERACTION=1
# export POETRY_VIRTUALENVS_CREATE=true

# Wish I could configure this in timewarriorcfg
# export TIMEWARRIORDB=$HOME/notes/work/.timewarrior/

# Setup C++14 compiling on MacOS
# export CC=/opt/homebrew/Cellar/llvm/15.0.6/bin/clang
