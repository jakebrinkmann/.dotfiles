#!/bin/bash

# ----------------------------------
# ANSI Color Ref
# Format: $green = "\033[01;32m";
function c() { echo -ne "\[\033[0$1m\]"; }
function colors() {
  echo -e "\033[00;30mBlack       0;30       \033[01;30mDark Gray     1;30"
  echo -e "\033[00;31mRed         0;31       \033[01;31mBold Red      1;31"
  echo -e "\033[00;32mGreen       0;32       \033[01;32mBold Green    1;32"
  echo -e "\033[00;33mYellow      0;33       \033[01;33mBold Yellow   1;33"
  echo -e "\033[00;34mBlue        0;34       \033[01;34mBold Blue     1;34"
  echo -e "\033[00;35mPurple      0;35       \033[01;35mBold Purple   1;35"
  echo -e "\033[00;36mCyan        0;36       \033[01;36mBold Cyan     1;36"
  echo -e "\033[00;37mLight Gray  0;37       \033[01;37mBold Gray     1;37"
  echo -e "\033[00;01mBold        0;01       \033[00;04mUnderlined    0;04"
  echo -e "\033[00;05mBlink       0;05       \033[00;07minverted      0;07"
}
# ----------------------------------

RESET=$(c '0')
BLACK=$(c '0;30')
RED=$(c '0;31')
GREEN=$(c '0;32')
YELLOW=$(c '0;33')
BLUE=$(c '0;34')
MAGENTA=$(c '0;35')
CYAN=$(c '0;36')
WHITE=$(c '0;37')
_BLACK=$(c '1;30')
_RED=$(c '1;31')
_GREEN=$(c '1;32')
_YELLOW=$(c '1;33')
_BLUE=$(c '1;34')
_MAGENTA=$(c '1;35')
_CYAN=$(c '1;36')
_WHITE=$(c '1;37')

DONE="✓"
URGENT="➤"
OVERDUE="¡"
DUETODAY="♦"
DUETOMORROW="▲"

NEEDFOCUS="∅"
AMFOCUSED="λ"

PROMPTCOLORS="$_CYAN\u$RESET@$_GREEN\h"
##### Check if running in docker container
if [ -f /.dockerenv ]; then
  PROMPTCOLORS="$_CYAN\u$RESET@$_BLACK\h"
fi

# Git Integration
function git_prompt {
  if [ -e ".git" ]; then
    BRANCH=`git rev-parse --abbrev-ref HEAD 2> /dev/null`;
    if [ -n "$BRANCH" ]; then
        DIRTY=`git status --porcelain --untracked-files=no 2> /dev/null`;
        if [ -n "$DIRTY" ]; then
          echo "$_RED($BRANCH*)";
        else
          echo "$_MAGENTA($BRANCH)";
        fi;
    fi;
  fi
}

# TaskWarrior integration
# Inspired by Paul Fenwick (https://gist.github.com/pjf)
function task_indicator {
    if [ `task +READY +OVERDUE count` -gt "0" ]; then
        echo "$RED$OVERDUE$RESET"
    elif [ `task +READY +TODAY count` -gt "0" ]; then
        echo "$YELLOW$DUETODAY$RESET"
    elif [ `task +READY +TOMORROW count` -gt "0" ]; then
        echo "$BLUE$DUETOMORROW$RESET"
    elif [ `task +READY urgency \> 10 count` -gt "0" ]; then
        echo "$CYAN$URGENT$RESET"
    else
        echo "$GREEN$DONE$RESET"
    fi
}

TERMTITLE='\033]0; '
TERMEND='\007'

# Fancy directory shortening
function cut_dirname {
  THISDIR=$(basename $PWD)
  CUTDIRS=$(echo $(dirname $(pwd | sed "s;$HOME;~;"))/ |sed -e "s;\(/\.\?.\)[^/]*;\1;g" -e "s;/h/s;~;" -e "s;\./;;")
  echo $CUTDIRS$THISDIR
}

# Updates the Prompt correctly
function update_PS1 {
  ERROR=$(if [ $? = 0 ]; then echo $YELLOW; else echo $RED; fi)
  echo -ne "$TERMTITLE$(cut_dirname)$TERMEND"
  unset PS1
  PS1+="\n"
  PS1+="$RESET$(task_indicator) "
  PS1+="$ERROR\t "
  PS1+="$PROMPTCOLORS "
  PS1+="$_YELLOW\w "
  PS1+="$(git_prompt)\n"
  PS1+="$RESET$ "
}

PROMPT_COMMAND=update_PS1
