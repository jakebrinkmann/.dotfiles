#!/bin/bash

# ----------------------------------
# ANSI Color Ref
# Format: $green = "\033[01;32m";
function c() { echo -ne "\[\033[0$1m\]"; }
function colors() {
  #Background
  for clbg in {40..47} {100..107} 49 ; do
    #Foreground
    for clfg in {30..37} {90..97} 39 ; do
      #Formatting
      for attr in 0 1 2 4 5 7 ; do
        #Print the result
        echo -en "\e[${attr};${clbg};${clfg}m ^[${attr};${clbg};${clfg}m \e[0m"
      done
      echo #Newline
    done
  done
  #Foreground
  for fgbg in 38 48 ; do # Foreground / Background
    for color in {0..255} ; do # Colors
        # Display the color
        printf "\e[${fgbg};5;%sm  %3s  \e[0m" $color $color
        # Display 6 colors per lines
        if [ $((($color + 1) % 6)) == 4 ] ; then
            echo # New line
        fi
    done
    echo # New line
done
}
# ----------------------------------

RESET=$(c '0')
BLACK=$(c '0;30')
RED=$(c '0;31')
GREEN=$(c '0;32')
YELLOW=$(c '0;33')
BLUE=$(c '0;34')
MAGENTA=$(c '0;35')
CYAN=$(c '0;36')
WHITE=$(c '0;37')
_BLACK=$(c '1;30')
_RED=$(c '1;31')
_GREEN=$(c '1;32')
_YELLOW=$(c '1;33')
_BLUE=$(c '1;34')
_MAGENTA=$(c '1;35')
_CYAN=$(c '1;36')
_WHITE=$(c '1;37')
__YELLOW=$(c '1;93')

DONE="✓"
URGENT="➤"
OVERDUE="¡"
DUETODAY="♦"
DUETOMORROW="▲"

NEEDFOCUS="∅"
AMFOCUSED="λ"

##### "$USER@$HOSTNAME"
PROMPTCOLORS="$_CYAN\u$RESET@$_GREEN\h"
##### Check if running in docker container
if [ -f /.dockerenv ]; then
  PROMPTCOLORS="$_CYAN\u$RESET@$_BLACK\h"
fi

# Git Integration
function git_prompt {
  if [ -e ".git" ]; then
    BRANCH=`git rev-parse --abbrev-ref HEAD 2> /dev/null`;
    if [ -n "$BRANCH" ]; then
        DIRTY=`git status --porcelain --untracked-files=no 2> /dev/null`;
        if [ -n "$DIRTY" ]; then
          echo "$_RED($BRANCH*) ";
        else
          echo "$_MAGENTA($BRANCH) ";
        fi;
    fi;
  fi
}

# TaskWarrior integration
# Inspired by Paul Fenwick (https://gist.github.com/pjf)
function task_indicator {
  MSG=""
    if [ `task +READY +OVERDUE count` -gt "0" ]; then
        MSG+="$RED$OVERDUE$RESET"
    elif [ `task +READY +TODAY count` -gt "0" ]; then
        MSG+="$YELLOW$DUETODAY$RESET"
    elif [ `task +READY +TOMORROW count` -gt "0" ]; then
        MSG+="$BLUE$DUETOMORROW$RESET"
    elif [ `task +READY urgency \> 10 count` -gt "0" ]; then
        MSG+="$CYAN$URGENT$RESET"
    else
        MSG+="$GREEN$DONE$RESET"
    fi

    # Override the status when I'm busy
    if [ `task +ACTIVE count` -gt "0" ]; then
        MSG=" "
        MSG+="$(c '0;07')$AMFOCUSED "
        MSG+="$(task _get $(task _ids +ACTIVE).description)$RESET "
    fi

    echo $MSG
}

TERMTITLE='\033]0; '
TERMEND='\007'

# Fancy directory shortening
function cut_dirname {
  THISDIR=$(basename $PWD)
  CUTDIRS=$(echo $(dirname $(pwd | sed "s;$HOME;~;"))/ |sed -e "s;\(/\.\?.\)[^/]*;\1;g" -e "s;/h/s;~;" -e "s;\./;;")
  echo $CUTDIRS$THISDIR
}

# Updates the Prompt correctly
function update_PS1 {
  ERROR=$(if [ $? = 0 ]; then echo $YELLOW; else echo $RED; fi)
  echo -ne "$TERMTITLE$(cut_dirname)$TERMEND"
  unset PS1
  PS1+="\n"
  PS1+="$ERROR\t "
  PS1+="$__YELLOW\w "
  PS1+="$(git_prompt)"
  PS1+="$RESET$(task_indicator) "
  PS1+="\n$RESET$ "
}

PROMPT_COMMAND=update_PS1
