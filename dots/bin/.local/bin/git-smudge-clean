#!/usr/bin/env bash
#######################################################################################
# This script is meant to be used as a global smudge-clean filter for removing        #
# sensitive data from your commits.                                                   #
#######################################################################################
# Install:
# 	git config --global filter.reductScript.smudge "~/.local/bin/git-smudge-clean smudge"
# 	git config --global filter.reductScript.clean "~/.local/bin/git-smudge-clean clean"

declare -A mapArr

mapArr["XR2lGR14OKGOxCAG"]="$GITLAB_PRIVATE_TOKEN"
mapArr["gitlab.mywork.net"]="$GITLAB_SERVER"
mapArr["cDmOpxuW2vX1WAz9"]="$GITLAB_TOKEN"
mapArr["oops@mycompany.net"]="$JIRA_EMAIL"
mapArr["atlassian.somewhere.net"]="$JIRA_SERVER"
mapArr["vqy0SzyalcagmHRB"]="$JIRA_TOKEN"
mapArr["9UdfWpz4k2Gk6Ufy"]="$SVN_PASSWORD"
mapArr["mycompany"]="$WORK_NAME"

# mac users should use gsed instead of sed
sedcmd="sed"
[[ "$OSTYPE" == "darwin"* ]] && sedcmd="gsed"
if [[ "$1" == "smudge" ]]; then
  for key in "${!mapArr[@]}"; do
    sedcmd+=" -e \"s/${key}/${mapArr[${key}]}/g\""
  done
elif [[ "$1" == "clean" ]]; then
  for key in "${!mapArr[@]}"; do
    sedcmd+=" -e \"s/${mapArr[${key}]}/${key}/g\""
  done
else
  echo "use smudge/clean as the first argument"
  exit 1
fi

eval "$sedcmd"
