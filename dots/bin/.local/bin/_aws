#!/bin/bash
[ -n "$DEBUG" ] && set -x

_aws_cfg_region() {
  aws configure get region
}

_aws_sts_account() {
  aws sts get-caller-identity | jq -r '.Account'
}

# aws.compute.ECR (Elastic Container Registry)
_aws_ecr_dkr_login() {
  aws ecr get-login-password \
      | docker login --username AWS \
        --password-stdin "$(_aws_sts_account).dkr.ecr.$(_aws_cfg_region).amazonaws.com"
}

# aws.compute.ECS (Elastic Container Service)
_aws_ecs_ls_clstrs() {
  aws ecs list-clusters --region=us-east-1 \
    | jq -r '.clusterArns[0]'
}

_aws_ecs_ls_svcs() {
  aws ecs list-services --region us-east-1 --cluster=$ECS_HSA_CLUSTER_ID \
    | jq -r '.serviceArns | map(select(. | contains("<SERVICE_NAME>")))[0]'
}

_aws_ecs_ls_tasks() {
  aws ecs list-tasks \
    --cluster="$ECS_CLUSTER_ID" \
    --service-name="$ECS_HSA_SERVICE_ID" \
    | jq -r '.taskArns[0]'
}


_aws_ecs_exc_bash() {
  aws ecs execute-command \
    --cluster="$ECS_CLUSTER_ID" \
    --task="$ECS_TASK_ID" \
    --container="$ECS_CONTAINER_ID" \
    --command="bash" \
    --interactive
}

__parse_local_foos() {
  typeset -F | grep 'declare -f _aws_' | sed 's/declare.*_aws_/\t/' | sort | tr '\n' ', '| sed 's/, $/\n/'
}


main() {
  cmd="_aws_$1";
  shift
  if [ -n "$(type $cmd 2>/dev/null)" ]; then
      $cmd "$@"
  else
      echo "Command not found. Available:"
      printf "\t %s" "$(__parse_local_foos)"
      return 1
  fi
}

main "$@"
