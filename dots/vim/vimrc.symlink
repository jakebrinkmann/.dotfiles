
" enter current millenium
set nocompatible
" enable builtin plugins
filetype plugin on
" sane text files
set fileformat=unix
set encoding=utf-8
set fileencoding=utf-8
scriptencoding utf-8
" (default is 4000 ms = 4 s)
set updatetime=50
" Highlight current cursor-line
set cursorline
set noerrorbells
set tabstop=4 softtabstop=4
set shiftwidth=4
set expandtab
set smartindent
" Line Numbers
set number
" Relative to current line
set norelativenumber
set nowrap
set smartcase
set noswapfile
set nobackup
" Turn on highlighting search-hits
set hlsearch
" Start searching right away
set incsearch
set undodir=~/.vim/undodir
set undofile
" always show the status bar
set laststatus=2
" enable 256 colors
set t_Co=256
set t_ut=
" search into subdirectories
set path+=**
" cycle through matches
set wildmenu
" set splits more naturally
set splitbelow
set splitright
" dont auto-resize windows
set noequalalways

" code folding
set foldmethod=indent
set foldlevel=99

set colorcolumn=88
highlight ColorColumn ctermbg=0 guibg=lightgrey

" Trailing whitespace is an ERROR
match Error /\s\+$/

" Show dots for spaces (listchars)
set list
set listchars=eol:↵,tab:▸.,trail:★,precedes:←,extends:→,space:·

" SpaceVIM! SpaceMACS!
let mapleader = " "

" plugins
let need_to_install_plugins = 0
if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    "autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    let need_to_install_plugins = 1
endif

" https://github.com/junegunn/vim-plug
call plug#begin('~/.vim/plugged')
Plug 'morhetz/gruvbox'
Plug 'itchyny/lightline.vim'
Plug 'jremmen/vim-ripgrep'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-dotenv'
Plug 'tpope/vim-vinegar'
Plug 'farmergreg/vim-lastplace'
Plug 'vim-utils/vim-man'
Plug 'airblade/vim-gitgutter'
Plug 'Valloric/YouCompleteMe', { 'do': './install.py --ts-completer' }
Plug 'mbbill/undotree'
Plug 'majutsushi/tagbar'
Plug 'sheerun/vim-polyglot'
Plug 'w0rp/ale'
Plug 'vim-test/vim-test'
Plug 'jmcantrell/vim-virtualenv'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'majutsushi/tagbar'
call plug#end()

" Auto-install plugins
if need_to_install_plugins == 1
    echo "Installing plugins..."
    silent! PlugInstall
    echo "Done!"
    q
endif

" Setup cursor for Windows Terminal
if &term =~ '^xterm'
    " normal mode
    let &t_EI .= "\<Esc>[0 q"
    " insert mode
    let &t_SI .= "\<Esc>[6 q"
endif

colorscheme gruvbox
set background=dark
set noshowmode
let g:lightline = { 'colorscheme': 'gruvbox' }

if executable('rg')
    let g:rg_derive_root = 'true'
endif

" hide gitignored files from netrw <- Doesn't work for me :(
" let g:netrw_list_hide= netrw_gitignore#Hide()
" define what a hidden file is
let g:netrw_list_hide='\(^\|\s\s\)\zs\.\S\+'
" hide hidden by default
let g:netrw_hide = 1
" directory banner is mostly useless
let g:netrw_banner = 0
" tree list view
let g:netrw_liststyle = 3
" open files in current pane
let g:netrw_browse_split = 0
" width of the directory explorer
let g:netrw_winsize = 25

" Configure ALE Linters and Fixers
let g:ale_linters = {
    \'python': ['flake8'],
    \'javascript': ['eslint']
\}
" $ cat ~/.config/flake8
" [flake8]
" max-line-length=88
let g:ale_fixers = {
    \'*': ['remove_trailing_lines', 'trim_whitespace'],
    \'python': ['black', 'isort'],
    \'javascript': ['prettier'],
    \'css': ['prettier']
\}
" Only run linters when specified
let g:ale_linters_explicit = 1

" Make switching buffers easier
nnoremap <Leader>b :ls<Cr>:b<Space>

" Hmmm setting up YCM for python...
let g:ycm_python_interpreter_path = ''
let g:ycm_python_sys_path = []
nnoremap <leader>p oimport pdb; pdb.set_trace()<Esc>
nnoremap <leader><S-p> Oimport pdb; pdb.set_trace()<Esc>
" enable all syntax highlighting
let g:python_highlight_all = 1
" allow for local virtualenvs
let g:virtualenv_directory = $PWD
nnoremap <leader>tv :VirtualEnvActivate<SPACE>
" force vim-test to use pytest
let test#python#runner = 'pytest'
" running tests on different granularities
nmap <silent> <leader>tp :TestNearest --pdb<CR>
nmap <silent> <leader>tn :TestNearest<CR>
nmap <silent> <leader>tf :TestFile<CR>
nmap <silent> <leader>ts :TestSuite<CR>
nmap <silent> <leader>tl :TestLast<CR>
nmap <silent> <leader>tg :TestVisit<CR>
let test#strategy = "vimterminal"

nnoremap <leader>tb :TagbarToggle<CR>
nnoremap <leader>u :UndotreeShow<CR>
nnoremap <leader>pv :wincmd v<bar> :Explore <bar> :wincmd r <bar> :vertical resize 30<CR>
nnoremap <leader>ps :Rg<SPACE>
nnoremap <leader>pf :Files<CR>
nnoremap <leader>gs :Gstatus<CR>
nnoremap <silent> <leader>+ :vertical resize +5<CR>
nnoremap <silent> <leader>- :vertical resize -5<CR>
nnoremap <silent> <leader>. :resize +5<CR>
nnoremap <silent> <leader>, :resize -5<CR>

" Auto close preview window
let g:ycm_autoclose_preview_window_after_completion=1
nnoremap <silent> <leader>gd :YcmCompleter GoTo<CR>
nnoremap <silent> <leader>gf :YcmCompleter FixIt<CR>

set shell=bash\ -l
nnoremap <leader>tt :botright terminal<CR>

" Pretty-print JSON
nnoremap =j :%!python3 -m json.tool<CR>
" Pretty-print ALE
nnoremap =a :ALEFix<CR>

" move through split windows
nnoremap <silent> <C-Up> :wincmd K<CR>
nnoremap <silent> <C-Down> :wincmd J<CR>
nnoremap <silent> <C-Left> :wincmd H<CR>
nnoremap <silent> <C-Right> :wincmd L<CR>
nnoremap <silent> <C-k> :wincmd k<CR>
nnoremap <silent> <C-j> :wincmd j<CR>
nnoremap <silent> <C-h> :wincmd h<CR>
nnoremap <silent> <C-l> :wincmd l<CR>
" free the <C-L> from netrw
nnoremap <leader><leader><leader><leader><leader> <Plug>NetrwRefresh
" Re-select visual block after indenting
vnoremap < <gv
vnoremap > >gv
" Move visual block
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv
" Ctrl-C to close window
nnoremap <silent> <C-c> :wincmd q<CR>
" Ctrl+Z to save
nmap <c-z> :w<CR>
imap <c-z> <Esc>:w<CR>a

" Turn off display in QuickFixes
autocmd FileType qf setlocal nonumber colorcolumn=
" Automatically source vimrc on save.
autocmd! bufwritepost $MYVIMRC source $MYVIMRC
