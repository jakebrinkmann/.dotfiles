snippet st "boto3 stubber" b
import botocore
@pytest.fixture
def stub_${1:ddb}():
    stub_$1 = botocore.stub.Stubber(${2:Table.meta.client})
    stub_$1.activate()
    yield stub_$1
    stub_$1.deactivate()
#@pytest.mark.integration
def test_get(stub_$1):
    stub_$1.add_response(
        "query", {"Items": [{"column1": {"S": "0000001 0000002 0000003"}}]}
    )
endsnippet

snippet ex "sqlalchemy execute block" b
with get_connection() as connection:
    with connection.begin():
        connection.execute(${1:stmt}${2:, items})
endsnippet

snippet sa "sqlalchemy boilerplate" b
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
tbl_${1:my_table} = sa.Table(
    "$1",
    sa.MetaData(schema="${2:schema}"),
    sa.Column("${3:attr}", sa.Integer, primary_key=True),
)

def _select_records() -> 'sa.Select':
    return sa.select([tbl_$1]).where(tbl_$1.c.$3 == 0)

def list_records() -> list:
    return execute(_select_records()).mappings().fetchall()
endsnippet


snippet ct "sqlalchemy count boilerplate" b
def _count_records_stmt(stmt: "sa.Select", limit: int) -> "sa.Select":
    return sa.select(
        [
            sa.func.count(),
            sa.cast(
                sa.func.ceiling(sa.func.count() / sa.cast(limit, sa.Float)),
                sa.Integer,
            ),
        ]
    ).select_from(stmt.alias("pages"))

def _count_records(sql, limit: int) -> tuple:
    count, pages = execute(_count_records_stmt(sql, limit)).fetchone()
    return count, pages

def _limit_records_stmt(sql: "sa.Select", limit: int, page: int) -> "sa.Select":
    # recalculate offset if other than page one
    offset = 0
    if page > 1:
        offset = (page - 1) * limit
    return sql.limit(limit).offset(offset)

def get_records(limit: int, page: int, sort: str, search: str = None) -> tuple:
    stmt = get_records_stmt(sort, search)
    records = execute(_limit_records_stmt(stmt, limit, page)).fetchall()
    count, pages = _count_records(stmt, limit)
    return records, count, pages
endsnippet

snippet
import os
from sqlalchemy import create_engine
from sqlalchemy.engine import URL
from sqlalchemy.orm import sessionmaker


def get_engine(credentials: dict[str, str]):
    connect_url = URL.create(
        'postgresql',
        username=credentials['username'],
        password=credentials['password'],
        host=credentials['host'],
        port=credentials['port'],
        database=credentials['database'])
    connect_args = {"application_name": "Info-Api"}

    engine = create_engine(dsn, connect_args=connect_args, implicit_returning=False)
    return engine

def get_session():
    engine = get_engine()
    return sessionmaker(bind=engine)

with get_session().begin() as session:
    session.add(some_object)
    session.add(some_other_object)
    session.commit()
endsnippet

snippet pt "pytest function" b
import pytest

from ${1:foo} import ${2:bar} as subject

@pytest.fixture
def event(create_event):
    return create_event("GET", "/path")

@pytest.fixture
def db_row():
    return {}

@pytest.fixture
def mock_db(mocker, db_row):
    return mocker.patch("$1.fetchone", return_value=db_row)

def test_$2(mock_db, event):
    """SCENARIO: <<determinable situation>>"""
    # GIVEN there is <<precondition or input>>

    # WHEN I <<behavior by actor>>
    result = subject()

    # THEN I should <<expected testable outcome>>
    assert 0
endsnippet

snippet param "pytest parametrize"
# https://docs.pytest.org/en/6.2.x/parametrize.html
@pytest.mark.parametrize("x", [0, 1])
@pytest.mark.parametrize("y", [2, 3])
def test_foo(x, y):
    pass

@pytest.mark.parametrize("value, expected", [
    ('never', NEVER),
    ('hard', HARD),
    ('demand', DEMAND)
    ('try', TRY),
])
endsnippet

snippet aaa "arrange act assert" b
"""Scenario: <<determinable situation>>"""
# Given there is <<precondition or input>>

# When I <<behavior by actor>>
result = subject()

# Then I should <<expected testable outcome>>
assert 0
endsnippet

snippet pdb "" b
breakpoint()
endsnippet

snippet rn "" b
raise NotImplementedError(${1:"TODO"})
endsnippet

snippet a "" b
assert ${1:False}
endsnippet

snippet dc "" b
from typing import List, Optional, Union, Dict, NewType
from enum import Enum, unique
>>> @unique
... class Mistake(Enum):
...     ONE = 1
...     TWO = 2
...     THREE = 3
...     FOUR = 3
from dataclasses import dataclass, field
endsnippet

snippet pb "poetry black config"
[tool.black]
line-length = 120
target_version = ['py39']
endsnippet

snippet pt "poetry pytest config"
[tool.pytest.ini_options]
minversion = "6.0"
python_files = [ "test_*.py" ]
norecursedirs = [
  ".git",
  ".pytest_cache",
  ".aws-sam"
]
filterwarnings = [
  "error::UserWarning",
  "error::DeprecationWarning",
  "error::PendingDeprecationWarning"
]

addopts = [
  "-m", "not (realdb)",
  "-p", "no:cacheprovider",
  "-vv",
  "--color=yes",
  "--junitxml=report.xml",
  "--cov"
]
endsnippet

snippet pc "poetry converage config"
[tool.coverage]
[tool.coverage.run]
branch = true
omit = [ "tests/*" ]
data_file = "/tmp/.coverage"

[tool.coverage.report]
ignore_errors = true
exclude_lines = [
    "raise NotImplementedException",
    "if 0:",
    "pass",
    "if __name__ == '__main__':",
    'if __name__ == "__main__":',
    "__version__",
]

[tool.coverage.xml]
output = "coverage.xml"
endsnippet

snippet poaws "poetry aws config"
[tool.poetry.dependencies]
python = "^3.9"
boto3 = "*"
aws-sam-cli = "*"
aws-lambda-powertools = "*"

[tool.poetry.dev-dependencies]
black = "*"
boto3-stubs = "*"
cfn-lint = "*"
coverage = {extras = ["toml"], version = "*"}
flake8 = "*"
flynt = "*"
mypy = "*"
isort = "*"
pytest = "*"
pytest-cov = "*"
pytest-mock = "*"
pytest-mccabe = "*"
pyupgrade = "*"
endsnippet

snippet flake8 ".flake8"
[flake8]
max-line-length = 120
max-complexity = 10
per-file-ignores =
    __init__.py:F401
exclude = .venv, .git, __pycache__, build, dist, setup.py
endsnippet

snippet stdout
import sys
# ...
logging.getLogger().addHandler(logging.StreamHandler(sys.stdout))
endsnippet

snippet start
import time; start, count = time.time(), 0;
count+=1; print(f"{count} Process time:  + {time.time() - start}")
endsnippet
