snippet i-cdk
npm i -g aws-cdk
npx cdk --version
cdk --version
cdk docs
mkdir cdk; cd cdk; cdk init sample-app --language=typescript|python
cdk -v ls
cdk diff
cdk deploy
cdk deploy --hotswap
cdk watch
cdk synth
cdk destroy
endsnippet

snippet synk
npm install snyk@latest -g
snyk --version
cdk synth â€“quiet
snyk iac test cdk.out --json
endsnippet

snippet constructorV2
import * as cdk from 'aws-cdk-lib';

export class CdkWorkshopStack extends cdk.Stack {
  constructor(scope: cdk.App, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    // nothing here!
  }
}
endsnippet

snippet construct
import * as cdk from 'aws-cdk-lib';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import { Construct } from 'constructs';

export interface HitCounterProps {
  /** the function for which we want to count url hits **/
  downstream: lambda.IFunction;
}

export class HitCounter extends Construct {
  constructor(scope: Construct, id: string, props: HitCounterProps) {
    super(scope, id);

    // TODO
  }
}
endsnippet

snippet lambda
import * as lambda from 'aws-cdk-lib/aws-lambda';
...
    // defines an AWS Lambda resource
    const hello = new lambda.Function(this, 'HelloHandler', {
      runtime: lambda.Runtime.NODEJS_14_X,    // execution environment
      code: lambda.Code.fromAsset('lambda'),  // code loaded from "lambda" directory
      handler: 'hello.handler'                // file is "hello", function is "handler"
    });
endsnippet

snippet apigw
import * as apigw from 'aws-cdk-lib/aws-apigateway';
...
    // defines an API Gateway REST API resource backed by our "hello" function.
    const gateway = new apigw.LambdaRestApi(this, 'Endpoint', {
      handler: hello
    });

    this.Endpoint = new cdk.CfnOutput(this, 'GatewayUrl', {
      value: gateway.url
    });
endsnippet

snippet dynamo
import * as dynamodb from 'aws-cdk-lib/aws-dynamodb';
...

  /** allows accessing the counter function */
  public readonly handler: lambda.Function;

  /**
   * The read capacity units for the table
   *
   * Must be greater than 5 and lower than 20
   *
   * @default 5
   */
  readCapacity?: number;
  ...

    if (props.readCapacity !== undefined && (props.readCapacity < 5 || props.readCapacity > 20)) {
      throw new Error('readCapacity must be greater than 5 and less than 20');
    }

    const table = new dynamodb.Table(this, 'Hits', {
        partitionKey: { name: 'path', type: dynamodb.AttributeType.STRING },
        encryption: dynamodb.TableEncryption.AWS_MANAGED,
        readCapacity: props.readCapacity ?? 5
    });

    this.handler = new lambda.Function(this, 'HitCounterHandler', {
        runtime: lambda.Runtime.NODEJS_14_X,
        handler: 'hitcounter.handler',
        code: lambda.Code.fromAsset('lambda'),
        environment: {
            DOWNSTREAM_FUNCTION_NAME: props.downstream.functionName,
            HITS_TABLE_NAME: table.tableName
        }
    });

    // grant the lambda role read/write permissions to our table
    table.grantReadWriteData(this.handler);

    // grant the lambda role invoke permissions to the downstream function
    props.downstream.grantInvoke(this.handler);
endsnippet

snippet assert
import { Template, Capture } from 'aws-cdk-lib/assertions';
import * as cdk from 'aws-cdk-lib';
import * as lambda from 'aws-cdk-lib/aws-lambda';
import { HitCounter }  from '../lib/hitcounter';

test('DynamoDB Table Created', () => {
  const stack = new cdk.Stack();
  // WHEN
  new HitCounter(stack, 'MyTestConstruct', {
    downstream:  new lambda.Function(stack, 'TestFunction', {
      runtime: lambda.Runtime.NODEJS_14_X,
      handler: 'hello.handler',
      code: lambda.Code.fromAsset('lambda')
    })
  });
  // THEN

  const template = Template.fromStack(stack);
  template.resourceCountIs("AWS::DynamoDB::Table", 1);
});

test('read capacity can be configured', () => {
  const stack = new cdk.Stack();

  expect(() => {
    new HitCounter(stack, 'MyTestConstruct', {
      downstream:  new lambda.Function(stack, 'TestFunction', {
        runtime: lambda.Runtime.NODEJS_14_X,
        handler: 'hello.handler',
        code: lambda.Code.fromAsset('lambda')
      }),
      readCapacity: 3
    });
  }).toThrowError(/readCapacity must be greater than 5 and less than 20/);
});
endsnippet

snippet cdkp
npx cdkp list
npx cdkp init {pattern-name}
cd {pattern-name}
npm run watch
npm run test
npx cdk synth
npm run deploy
endsnippet

snippet app
#!/usr/bin/env node
import * as cdk from 'aws-cdk-lib';
import { ReportingAnalyticsStack } from '../lib/reporting-analytics-stack';

const props = {
  environmentType:
    process.env.RUNTIME_ENVIRONMENT || process.env.USER || 'unknown'
};

const app = new cdk.App();
new ReportingAnalyticsStack(
  app,
  `ReportingAnalyticsStack-${props.environmentType}`,
  props
);
endsnippet

snippet powertools

from aws_cdk import core, aws_lambda

class SampleApp(core.Construct):

    def __init__(self, scope: core.Construct, id_: str, env: core.Environment) -> None:
        super().__init__(scope, id_)

        powertools_layer = aws_lambda.LayerVersion.from_layer_version_arn(
            self,
            id="lambda-powertools",
            layer_version_arn=f"arn:aws:lambda:{env.region}:017000801446:layer:AWSLambdaPowertoolsPython:18"
        )
        aws_lambda.Function(self,
            'sample-app-lambda',
            runtime=aws_lambda.Runtime.PYTHON_3_9,
            layers=[powertools_layer]
            # other props...
        )
endsnippet

snippet props
const props = {
  env: {
    account: process.env.CDK_DEFAULT_ACCOUNT || process.env.AWS_ACCOUNT_ID,
    region: process.env.CDK_DEFAULT_REGION || process.env.AWS_REGION,
  },
  environmentType:
    process.env.RUNTIME_ENVIRONMENT || process.env.USER || 'unknown'
};

export interface CdkProps extends cdk.StackProps {
  /** The name of this deployment environment **/
  environmentType: string;
}
endsnippet

snippet tag
const dbTable = new dynamodb.Table(this, 'Cars')
// Tags will apply to sub-constructs hierarchically.
Tags.of(scope: dbTable).add(key: 'owner', value: 'fastandfurious'
{ key: 'Stage', value: 'prod', }, { key: 'Team', value: 'aws', },
Tags.of(scope: stack).add(key: 'StackName', value: 'YourStack');
Tags.of(scope: app).add(key: 'app', value: 'your-app-name')
Tags.of(stack).add('key01', 'value01', { includeResourceTypes: [], });
Tags.of(app).add('key01', 'value01', { applyToLaunchedInstances: true, priority: 100, includeResourceTypes: [],});
endsnippet

snippet logs
const fn = lambda.Function.fromFunctionArn(this, 'fn')

const logGroup = new LogGroup(this, 'loggroup', {
  retention: RetentionDays.THREE_MONTHS,
  removalPolicy: RemovalPolicy.DESTROY
});
new SubscriptionFilter(this, 'SubscriptionFilter', {
  logGroup: logGroup,
  filterPattern: FilterPattern.allTerms("WARN", "INFO"),
  destination: new LogsDestinations.LambdaDestination(fn.Arn)
});
endsnippet

snippet config
// https://cloudit.blog/2021/11/16/create-custom-queries-and-rules-for-aws-config-with-cdk/
const missingTagRule = new config.ManagedRule(this, "RequiredTags", {
    identifier: config.ManagedRuleIdentifiers.REQUIRED_TAGS,
    configRuleName: 'check-if-resources-are-tagged',
    description: 'AWS managed rule that checks for wrong or missing tags',
    inputParameters: {
        tag1Key: "Stage",
        tag2Key: "Team",
        tag3Key: "Comment"
    },
    ruleScope: RuleScope.fromResources([
        ResourceType.APIGATEWAY_REST_API,
        ResourceType.XRAY_ENCRYPTION_CONFIGURATION
    ])
})
missingTagRule.applyRemovalPolicy(RemovalPolicy.DESTROY)
endsnippet
