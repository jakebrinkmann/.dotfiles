# aws.compute.EC2 (Elastic Compute Cloud)
# aws.management.SSM (Systems Manager)
# aws.network.ELB (Elastic Load Balancing)
# aws.network.VPC (Virtual Private Cloud)
# aws.security.IAM (Identity and Access Management)
snippet aws-iam "aws iam commands"
aws iam list-roles | jq -c '.Roles[].Arn'
endsnippet
# aws.security.STS (Security Token Service)
snippet aws-sts "aws sts commands"
aws sts get-caller-identity --output json | jq '.Account' -r
endsnippet
# aws.security.SecretsManager
snippet aws-sm "aws secrets commands"
aws secretsmanager create-secret --name $SECRET_NAME --secret-string $VALUE
aws secretsmanager list-secrets | jq -c '.SecretList[].Name'
aws secretsmanager get-secret-value --secret-id $SECRET_NAME | jq -c '.SecretString | fromjson'
aws secretsmanager put-secret-value --secret-id $SECRET_NAME --secret-string "$VALUE"
aws secretsmanager delete-secret --secret-id $SECRET_NAME --force-delete-without-recovery
endsnippet
# aws.storage.S3 (Simple Storage Service)
snippet aws-s3 "aws s3 commands"
aws s3api list-buckets | jq -c '.Buckets[].Name'
aws s3api list-objects --bucket $BUCKET | jq -c '.Contents[].Key'
aws s3 cp s3://$BUCKET/$OBJECT_KEY /tmp
aws s3api get-object --bucket $BUCKET --key $OBJECT_KEY /tmp/$OBJECT_KEY
endsnippet
# aws.database.RDS (Relational Data Service)
# aws.database.DDB (DynamoDB NoSQL Database)
snippet aws-dynamodb "aws dynamodb commands"
aws dynamodb list-tables  --query 'TableNames[]'
aws dynamodb scan --table-name $TABLE --max-items 1 --query 'Items[] | [0]'
aws dynamodb get-item --table-name $TABLE --key '{"id": {"N": "'$KEY'"}}'
endsnippet
# aws.integration.SF (StepFunctions)
# aws.integration.SQS (Simple Queue Service)
snippet aws-sqs "aws sqs commands"
aws sqs list-queues | jq -c '.QueueUrls[]'
aws sqs send-message --queue-url $QUEUE_URL --message-body file://$EVENT_PATH
endsnippet
# aws.integration.SNS (Simple Notification Service)
snippet aws-sns "aws sns commands"
aws sns list-topics | jq -c '.Topics[].TopicArn'
aws sns list-topics --query "Topics[?contains(TopicArn, 'c')].TopicArn | [0]"
aws sns subscribe --topic-arn <value> --protocol email --notification-endpoint <email>
aws sns list-subscriptions | jq -c '.Subscriptions[] | select(.Protocol | test("email"))'
aws sns unsubscribe --subscription-arn <value>
endsnippet
# aws.engagement.SES (Simple Email Service)
snippet aws-ses "aws ses commands"
aws ses verify-email-identity --email-address $EMAIL
aws sesv2 create-configuration-set-event-destination \
  --configuration-set-name EmailEventConfigSet \
  --event-destination-name EmailSnsEventDestination \
  --event-destination $(cat <<__JSON__
{
  "Enabled": true,
  "MatchingEventTypes": [
    "REJECT",
    "BOUNCE",
    "DELIVERY",
    "RENDERING_FAILURE"
  ],
  "SnsDestination": {
    "TopicArn": "$EmailEventTopicArn"
  }
}
__JSON__
endsnippet
# aws.management.CFN (CloudFormation Infrastructure Stack)
snippet aws-cfn "aws cloudformation commands"
aws cloudformation list-exports | jq -c '.Exports[].Name'
aws cloudformation describe-stacks | jq -c '.Stacks[].StackName'
aws cloudformation describe-stacks --stack-name $STACK | jq -c '.Stacks[].StackStatus'
aws cloudformation describe-stack-resources --stack-name $STACK | jq -c '.StackResources[].PhysicalResourceId'
aws cloudformation delete-stack --stack-name $STACK
endsnippet
# aws.compute.ECR (Elastic Container Registry)
# aws.compute.ECS (Elastic Container Service)
# aws.compute.Lambda, SAM(Serverless Application Model)
snippet aws-lambda "aws lambda commands"
aws lambda list-functions --query 'Functions[].FunctionName'
FILENAME=$(mktemp --suffix '.zip')
pip install -r requirements.txt --target . && zip -r $FILENAME ./*
aws lambda update-function-code --function-name $LAMBDA --zip-file "fileb://$FILENAME" --publish | jq -r .LastUpdateStatus
aws lambda update-function-configuration --function-name $LAMBDA --timeout 30 --memory-size 256 | jq -r .LastUpdateStatus
aws lambda invoke  --function-name $LAMBDA --invocation-type RequestResponse --log-type Tail --payload "$(cat $EVENT | base64)" $tmpfile | jq -r .LogResult | base64 --decode
endsnippet
snippet aws-sam "aws sam commands"
sam build --use-container
sam deploy --stack-name $STACK --tags StackName=$STACK --capabilities CAPABILITY_IAM --no-fail-on-empty-changeset --s3-bucket $BUCKET --confirm-changeset
sam logs --stack-name $STACK --name $FUNCTION --tail
endsnippet
# aws.network.CF (CloudFront Delivery Network)
# aws.management.CloudWatch
snippet aws-logs "CloudWatch Observability"
aws logs describe-log-groups | jq -c '.logGroups[].logGroupName'
aws logs filter-log-events --log-stream-names $STREAM --log-group-name $GROUP --filter-pattern "$QUERY" | jq -r .events[].message
aws logs filter-log-events --log-group-name $GROUP --start-time $(date --date="1 day ago" +%s000) --filter-pattern "purchase_id" | jq -c '.events[]'
aws logs get-log-events --log-group-name $GROUP --log-stream-name $STREAM
aws logs tail $GROUP --since '10m' --follow --format short
aws logs start-query --log-group-names $GROUP --start-time $(date --date="30 minutes ago" "+%s") --end-time $(date "+%s") --query-string 'fields @message, @logStream | filter @message '"$QUERY"' | sort @timestamp desc | limit 20' | jq -r .queryId
aws logs get-query-results --query-id $QID | jq -r '.results[][] | select(.field == "@message") | .value' | uniq
endsnippet
