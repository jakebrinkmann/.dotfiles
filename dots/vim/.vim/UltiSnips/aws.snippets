# aws.configure
snippet trigger "aws configure"
aws configservice get-discovered-resource-counts --query "totalDiscoveredResources"
endsnippet
# aws.security
snippet trigger "description"
aws securityhub get-findings \
    --filters '{"SeverityLabel":[{"Value":"CRITICAL", "Comparison":"EQUALS"}], "WorkflowStatus":[{"Value":"NEW", "Comparison":"EQUALS"}], "RecordState":[{"Value":"ACTIVE", "Comparison":"EQUALS"}]}' \
    --sort-criteria '{ "Field":"SeverityLabel", "SortOrder":"desc" }' \
    --max-items 1000
endsnippet
# aws.compute.EC2 (Elastic Compute Cloud)
snippet trigger "description"
aws ssm get-parameters-by-path \
  --path /aws/service/ami-amazon-linux-latest \
  --query "Parameters[].Name"
aws ssm get-parameters \
  --names /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-arm64-gp2 \
  --query 'Parameters[0].[Value]'
aws ec2 describe-images \
  --image-id $IMAGEID --query "Images[*].BlockDeviceMappings"
aws ec2 describe-images \
    --filters "Name=block-device-mapping.encrypted,Values=true" \
    --query 'Images[*].[ImageId]' \
    --output text
aws ec2 modify-instance-metadata-options \
    --instance-id i-INSTANCE-ID \
    --http-tokens required \ >> this sets the instance metadata to imdsv2, be careful!
    --http-put-response-hop-limit 3 \
    --http-endpoint enabled
endsnippet
# aws.management.SSM (Systems Manager)
snippet aws-ssm "aws ssm commands"
aws ssm list-documents --query 'DocumentIdentifiers[].Name'
aws ssm send-command --instance-ids $AWS_HOST --document-name $DOCUMENT --parameters "KeyName=string,string" --query 'Command.CommandId'
aws ssm get-command-invocation --instance-id $AWS_HOST --command-id $COMMAND
endsnippet
# aws.network.ELB (Elastic Load Balancing)
# aws.network.VPC (Virtual Private Cloud)
# aws.security.IAM (Identity and Access Management)
snippet aws-iam "aws iam commands"
aws iam list-roles | jq -c '.Roles[].Arn'
aws iam create-user --user-name MyCdkUser
aws iam create-access-key --user-name MyCdkUser
aws iam delete-access-key --user-name MyCdkUser --access-key-id AKIAIOSFODNN7EXAMPLE
aws configure set aws_access_key_id us-west-2 --profile integ
aws configure set aws_secret_access_key us-west-2 --profile integ
aws iam list-policies --scope Local --only-attached --policy-usage-filter PermissionsPolicy --query Policies[]
aws iam get-policy-version --policy-arn <Arn> --version-id <DefaultVersionId>
endsnippet
# aws.security.STS (Security Token Service)
snippet aws-sts "aws sts commands"
aws sts get-caller-identity --output json | jq '.Account' -r
aws sts get-caller-identity --query 'Arn' --output text
aws sts assume-role --role-arn $ROLE --role-session-name $USER
aws sts decode-authorization-message --encoded-message (encoded error message) --query DecodedMessage --output text | jq '.'
endsnippet
# aws.security.SecretsManager
snippet aws-sm "aws secrets commands"
aws secretsmanager create-secret --name $SECRET_NAME --secret-string $VALUE
aws secretsmanager list-secrets --query 'SecretList[].Name' --output text
aws secretsmanager get-secret-value --secret-id $SECRET_NAME | jq -c '.SecretString | fromjson'
aws secretsmanager put-secret-value --secret-id $SECRET_NAME --secret-string "$VALUE"
aws secretsmanager delete-secret --secret-id $SECRET_NAME --force-delete-without-recovery
endsnippet
# aws.storage.S3 (Simple Storage Service)
snippet aws-s3 "aws s3 commands"
aws s3api create-bucket --bucket $BUCKET
aws s3api list-buckets | jq -c '.Buckets[].Name'
aws s3api list-objects --bucket $BUCKET | jq -c '.Contents[].Key'
aws s3 cp --website-redirect "$URL" s3://$BUCKET/$OBJECT /tmp
aws s3 rb s3://BUCKET-NAME --force
aws s3api get-object --bucket $BUCKET --key $OBJECT /tmp/$OBJECT
endsnippet
# aws.database.RDS (Relational Data Service)
snippet aws-rds
aws rds describe-db-engine-versions --engine aurora-postgresql --query '*[].[EngineVersion]'
aws rds describe-engine-default-parameters --db-parameter-group-family mariadb10.6 \
   --query 'EngineDefaults.Parameters[?IsModifiable==`true`]'
aws rds describe-db-cluster-parameters --db-cluster-parameter-group-name default.aurora-postgresql14
endsnippet
# aws.database.DDB (DynamoDB NoSQL Database)
snippet aws-dynamodb "aws dynamodb commands"
aws dynamodb list-tables  --query 'TableNames[]'
aws dynamodb scan --table-name $TABLE --max-items 1 --query 'Items[] | [0]'
aws dynamodb put-item \
    --table-name $TABLE \
    --item '{"Artist": {"S": "No One You Know"}}' \
    --return-values ALL_OLD
aws dynamodb get-item --table-name $TABLE --key '{"id": {"N": "'$KEY'"}}'
aws dynamodb delete-item --table-name $TABLE --key '{"id": {"S": "'$KEY'"}}'
endsnippet
# aws.integration.SF (StepFunctions)
snippet aws-states "aws stepfunction commands"
aws events list-event-buses --query 'EventBuses[].Name'
aws events put-events --entries "$EVENT"
aws stepfunctions list-state-machines --query 'stateMachines[].stateMachineArn'
aws stepfunctions start-execution --state-machine-arn $STATEMACHINE --input $EVENT
endsnippet
# aws.integration.SQS (Simple Queue Service)
snippet aws-sqs "aws sqs commands"
aws sqs list-queues | jq -c '.QueueUrls[]'
aws sqs send-message --queue-url $QUEUE_URL --message-body file://$EVENT_PATH
endsnippet
# aws.integration.SNS (Simple Notification Service)
snippet aws-sns "aws sns commands"
aws sns list-topics | jq -c '.Topics[].TopicArn'
aws sns list-topics --output table --query 'Topics[]'
aws sns list-topics --query "Topics[?contains(TopicArn, 'c')].TopicArn"
aws sns subscribe --topic-arn <value> --protocol email --notification-endpoint <email>
aws sns list-subscriptions | jq -c '.Subscriptions[] | select(.Protocol | test("email"))'
aws sns unsubscribe --subscription-arn <value>
endsnippet
# aws.engagement.SES (Simple Email Service)
snippet aws-ses "aws ses commands"
aws ses verify-email-identity --email-address $EMAIL
aws route53 list-hosted-zones-by-name --dns-name $HOSTEDZONENAME | jq -r .HostedZones[0].Id
aws ses verify-domain-identity --domain $HOSTEDZONENAME | jq -r .VerificationToken
aws ses list-identities --query 'Identities'
aws ses get-identity-verification-attributes --identities $EMAIL
aws ses set-identity-mail-from-domain --identity $HOSTEDZONENAME --mail-from-domain "no-reply.$HOSTEDZONENAME" --behavior-on-mx-failure UseDefaultValue
aws sesv2 create-configuration-set-event-destination \
  --configuration-set-name EmailEventConfigSet \
  --event-destination-name EmailSnsEventDestination \
  --event-destination $(cat << '__JSON__' | jq -c
{
  "Enabled": true,
  "MatchingEventTypes": [
    "REJECT",
    "BOUNCE",
    "DELIVERY",
    "RENDERING_FAILURE"
  ],
  "SnsDestination": {
    "TopicArn": "$EmailEventTopicArn"
  }
}
__JSON__
cat << __JSON__ > $TMPFILE
{
  "Changes": [
    {
      "Action": "UPSERT",
      "ResourceRecordSet": {
        "Name": "_amazonses.$HOSTEDZONENAME",
        "Type": "TXT",
        "TTL": 1800,
        "ResourceRecords": [
          {
            "Value": "\"$TXTTOKEN\""
          }
        ]
      }
    },
    {
      "Action": "UPSERT",
      "ResourceRecordSet": {
        "Name": "no-reply.$HOSTEDZONENAME",
        "Type": "MX",
        "TTL": 300,
        "ResourceRecords": [
          {
            "Value": "10 feedback-smtp.us-east-1.amazonses.com"
          }
        ]
      }
    },
    {
      "Action": "UPSERT",
      "ResourceRecordSet": {
        "Name": "$HOSTEDZONENAME",
        "Type": "TXT",
        "TTL": 300,
        "ResourceRecords": [
          {
            "Value": "\"v=spf1 include:amazonses.com ~all\""
          }
        ]
      }
    }
  ]
}
__JSON__
aws route53 change-resource-record-sets --hosted-zone-id $HOSTEDZONEID --change-batch file://$TMPFILE
endsnippet
# aws.management.CFN (CloudFormation Infrastructure Stack)
snippet aws-cfn "aws cloudformation commands"
aws cloudformation list-exports | jq -c '.Exports[].Name'
aws cloudformation describe-stacks | jq -c '.Stacks[].StackName'
aws cloudformation describe-stacks --stack-name $STACK | jq -c '.Stacks[].StackStatus'
aws cloudformation describe-stacks --stack-name $STACK | jq -c '.Stacks[].Outputs'
aws cloudformation describe-stacks --stack-name CfgBucket --query "Stacks[0].Outputs[?OutputKey == 'BucketName'].OutputValue" --output text
aws cloudformation describe-stack-resources --stack-name $STACK | jq -c '.StackResources[].PhysicalResourceId'
aws cloudformation package \
    --template-file template.yaml \
    --s3-bucket ${ARTIFACT_BUCKET} \
    --output-template-file packaged.yaml
aws cloudformation deploy --s3-bucket $BUCKET --template-file packaged.yaml --capabilities CAPABILITY_NAMED_IAM --stack-name $STACK
aws cloudformation delete-stack --stack-name $STACK
aws cloudformation wait stack-delete-complete --stack-name $STACK
aws cloudformation continue-update-rollback --stack-name $STACK
aws cloudformation update-stack --stack-name mystack --use-previous-template
  --parameters ParameterKey=VPCID,UsePreviousValue=true ParameterKey=SubnetIDs,ParameterValue=SampleSubnetID1\\,UpdatedSampleSubnetID2
aws cloudformation detect-stack-drift --stack-name $STACK
aws cloudformation describe-stack-drift-detection-status --stack-drift-detection-id "ID-FROM-PREVIOUS-RESULT"
endsnippet
# aws.compute.ECR (Elastic Container Registry)
# aws.compute.ECS (Elastic Container Service)
# aws.compute.Lambda
snippet aws-lambda "aws lambda commands"
aws lambda list-functions --query "Functions[?FunctionName | contains(@, 'LogSubmit')].FunctionName" --output text
aws lambda list-functions | jq ".Functions | group_by(.Runtime)|[.[]|{ (.[0].Runtime): [.[]|{ name: .FunctionName, timeout: .Timeout, memory: .MemorySize }] }]"
aws lambda list-functions | jq -r '[.Functions[]|{name: .FunctionName, env: .Environment.Variables}]|.[]|select(.env|length > 0)'
FILENAME=$(mktemp --suffix '.zip'); rm $FILENAME
pip install -r requirements.txt --target . && zip -r $FILENAME ./*
aws lambda update-function-code --function-name $LAMBDA --zip-file "fileb://$FILENAME" --publish | jq -r .LastUpdateStatus
aws lambda update-function-configuration --function-name $LAMBDA --timeout 30 --memory-size 256 | jq -r .LastUpdateStatus
aws lambda update-function-configuration --function-name $LAMBDA --handler "app.lambda_handler" --layers "arn:aws:lambda:us-east-1:017000801446:layer:AWSLambdaPowertoolsPython:4" --environment "Variables={DB_SECRET_NAME=cca/database/site_api_read_write,DB_PROXY_ENDPOINT=cca-database-proxy.proxy-cx6atckrdwx5.us-east-1.rds.amazonaws.com}" | jq -r .LastUpdateStatus
aws lambda invoke  --function-name $LAMBDA --invocation-type RequestResponse --log-type Tail --payload "$(echo $EVENT | base64)" $tmpfile | jq -r .LogResult | base64 --decode
endsnippet
# SAM(Serverless Application Model)
snippet aws-sam "aws sam commands"
poetry export -f requirements.txt --without-hashes > requirements.txt
sam init --location https://github.com/aws-samples/cookiecutter-aws-sam-python
sam build --use-container
sam package --output-template-file packaged.yaml --s3-bucket $BUCKET
sam deploy --stack-name $STACK --tags StackName=$STACK --capabilities CAPABILITY_IAM --no-fail-on-empty-changeset --s3-bucket $BUCKET --confirm-changeset
sam logs --stack-name $STACK --name $FUNCTION --tail
python serverless-application-model/bin/sam-translate.py --template-file=packaged.yaml --output-template=cft.json
endsnippet
# aws.network.CF (CloudFront Delivery Network)
# aws.management.CloudWatch
snippet aws-logs "CloudWatch Observability"
aws logs describe-log-groups | jq -c '.logGroups[].logGroupName'
aws logs tag-log-group --log-group-name <value> --tags Key=str,Key=str
aws logs filter-log-events --log-stream-names $STREAM --log-group-name $GROUP --filter-pattern "$QUERY" | jq -r .events[].message
aws logs filter-log-events --log-group-name $GROUP --start-time $(date --date="1 day ago" +%s000) --filter-pattern "purchase_id" | jq -c '.events[]'
aws logs get-log-events --log-group-name $GROUP --log-stream-name $STREAM
aws logs tail $GROUP --since '10m' --follow --format short
aws logs tail "/aws/lambda/$FUNCTION" --since '10m' --follow --format short
aws logs start-query --log-group-names $GROUP --start-time $(date --date="30 minutes ago" "+%s") --end-time $(date "+%s") --query-string 'fields @message, @logStream | filter @message '"$QUERY"' | sort @timestamp desc | limit 20' | jq -r .queryId
aws logs get-query-results --query-id $QID | jq -r '.results[][] | select(.field == "@message") | .value' | uniq
aws logs describe-log-groups | jq '.logGroups[] | select (has("retentionInDays") | not).logGroupName'
GROUP=$(aws logs describe-log-groups | jq -r '.logGroups[].logGroupName | select(test("Site-WS-EventFunction"))')
STREAM=$(aws logs describe-log-streams --log-group-name $GROUP --descending --max-items 1 | jq -r '.logStreams[0].logStreamName')
aws logs create-log-stream --log-group-name $GROUP --log-stream-name $(date "+%s")
aws logs delete-log-stream --log-group-name $GROUP --log-stream-name $STREAM
endsnippet
snippet route53
aws route53domains check-domain-availability --domain-name <value>
aws route53domains register-domain --domain-name <value>
endsnippet
snippet acm
aws acm request-certificate \
  --domain-name $DOMAIN_NAME \
  --subject-alternative-names *.$DOMAIN_NAME \
  --validation-method DNS \
  --query CertificateArn \
  --output text
aws acm describe-certificate \
  --certificate-arn $SSL_CERT_ARN \
  --query Certificate.DomainValidationOptions
aws route53 list-hosted-zones-by-name \
  --dns-name $DOMAIN_NAME \
  --query HostedZones
$ read -r -d '' R53_CNAME_JSON << EOM
{
  "Comment": "DNS Validation CNAME record",
  "Changes": [
    {
      "Action": "CREATE",
      "ResourceRecordSet": {
        "Name": "$SSL_CERT_NAME",
        "Type": "CNAME",
        "TTL": 300,
        "ResourceRecords": [
          {
            "Value": "$SSL_CERT_VALUE"
          }
        ]
      }
    }
  ]
}
EOM
endsnippet
snippet amplify
npx create-react-app my-new-app
npm install aws-amplify @aws-amplify/ui-react
amplify init
amplify add api
amplify add function
amplify mock function myFunctionName --event "./event.json"
amplify add hosting
amplify push --allow-destructive-graphql-schema-updates
amplify publish --invalidateCloudFront
amplify delete
endsnippet
snippet cognito
aws cognito-idp create-user-pool \
  --pool-name example-corp-prd-userpool
aws cognito-idp create-user-pool-domain \
  --domain example-corp-prd \
  --user-pool-id <yourUserPoolID>
aws cognito-idp update-user-pool-client --user-pool-id us-east-1_ABC \
  --client-id ABC2s2 \
  --allowed-o-auth-flows-user-pool-client \
  --allowed-o-auth-flows "code" "implicit" \
  --allowed-o-auth-scopes "openid" "profile" "email" \
  --callback-urls "[\"http://localhost:3000/\"]" \
  --supported-identity-providers "[\"MyIDP\"]"
aws cognito-idp list-user-pools --max-results 1 --query 'UserPools[0].Id' --output text
aws cognito-idp list-user-pool-clients --user-pool-id $UserPoolId \
  --query "UserPoolClients[?ClientName | contains(@, 'clientWeb')].ClientId"
aws cognito-idp describe-user-pool-client --user-pool-id $UserPoolId --client-id $ClientId
endsnippet
snippet cdk
npx cdk init sample-app --language=typescript
npx cdk ls
npx cdk bootstrap \
  --profile ProjectXProd \
  --cloudformation-execution-policies 'arn:aws:iam::aws:policy/AdministratorAccess' \
  123456789012/us-east-1 123456789012/us-west-1
endsnippet
snippet gateway
aws apigateway test-invoke-method --rest-api-id $API_ID --resource-id $RES_ID --http-method GET --path-with-query-string '/pets/1'
endsnippet
