snippet conditional
[ -z "$VAR" ] && echo "VAR=" && read VAR
-e file -- True if file exists.
-d file -- True if file exists and is a directory.
-f file -- True if file exists and is a regular file.
-n string -- True if the length of string is non-zero.
endsnippet
snippet cd-rel "invoke script anywhere"
pushd $(pwd)
cd $(dirname -- "$(readlink -f -- "$BASH_SOURCE")")
popd
endsnippet
snippet jq "some jq shortcuts"
jq -r '.events[].message | select(test("^Send Event: ")) | ltrimstr("Send Event: ") | fromjson'
jq -r '.results[] | map(select(.field == "@timestamp" or .field == "@message") | .value) | @tsv'
jq --null-input --arg user "$CLIENT_ID" '{"id": $user}'
echo '{ "foo": "bar" }' | jq --compact-output '.foo |= "baz" | del(.other)'
echo '{ "foo": "bar" }' | jq @json
jq '.users[] | .first + " " + .last' || jq '.users[]|{first:.first,title:.last}'
jq --slurp '.[0] * .[1]' file1 file2
echo '{"a":"foo","b":"bar"} {"c":"baz","a":0}' | jq -s add
endsnippet
snippet yq "some yq shortcuts"
yq -j -I4 sample.yaml
yq -P sample.json
endsnippet
snippet json
# NOTE: single quotes means no $vars
DATA=$(cat << '__JSON__' | jq -c
{
  "Enabled": true,
}
__JSON__
)
endsnippet
snippet curl
curl -d "@data.txt" -X POST http://localhost:3000/data
curl --data-raw @$JSON
curl -s -u $USER:$PW "localhost:24817/api/v3/content?fields=name&limit=1000" | jq -r .
curl --request POST --form token=$TRIGGER_TOKEN
api() { curl --request "$1" --header "Authorization: Bearer $JWT" $URL/v1/$2 "${@:3}"; }
endsnippet
snippet devtools "https://nodejs.org/en/docs/guides/debugging-getting-started/#command-line-options"
node --inspect=0.0.0.0:9229 -e "setTimeout(function() { console.log('yes'); }, 3000)"
node inspect --port=9229 node_modules/.bin/react-scripts start --no-cache
# edge://inspect/#devices
endsnippet
snippet debug "v8 debugger"
node --debug <file>
node debug <file>
endsnippet
snippet sysctl "debugging services"
sudo systemctl list-units | grep -i failed
sudo systemctl list-units --state failed
sudo journalctl --since "1 hour ago" -u nginx.service
endsnippet
snippet net "debugging networks"
tcpdump ether host e8:2a:ea:44:55:66
tcpdump -i any -e
endsnippet
snippet tunnel "ssh port tunneling"
ssh -n -L "5432:$PGHOST:5432" ssm-user@$AWS_HOST;
endsnippet
snippet catname "cat with filename"
tail -n +1 *.sh >> README.md
endsnippet
snippet hello "hello world"
#!/usr/bin/env bash
set -euo pipefail

install() {
  echo Hello World
}

# Call the requested function and pass the arguments as-is
"$@"
endsnippet
snippet python "python script wrapper"
SCRIPT_DIR=$(dirname $0 || exit $?)
python3 "$SCRIPT_DIR/install.py" "$@" || exit $?
endsnippet
snippet brewu "uninstall all brew"
brew remove --force $(brew list --formula)
endsnippet
snippet svnc "svn cheatsheet"
alias svn="svn --username=$SVN_USERNAME --password=$SVN_PASSWORD"
svn ls $SVN_REPO_URL/branches --verbose
svn list $SVN_REPO_URL/trunk/
svn list -R $SVN_REPO_URL/trunk | grep -i <search>
svn checkout $SVN_REPO_URL/trunk/doc trunk/doc
svn lock trunk/doc/FILENAME
svn diff
svn status
endsnippet
snippet awk
ls -l | awk '{ print $1 }'
endsnippet
snippet pipe
set -euxo pipefail
endsnippet
snippet find
find . -name "[!.]*"
endsnippet
snippet datagen
macaddr=$(echo $FQDN|md5sum|sed 's/^\(..\)\(..\)\(..\)\(..\)\(..\).*$/02:\1:\2:\3:\4:\5/')
endsnippet
snippet datetime
microseconds=$(date --date="1 day ago" +%s000)
seconds=$(date --iso-8601=seconds)
endsnippet
snippet color
echo "green" | awk '{print "\033[32m" $0 "\033[39m"}'
echo "blue" | awk '{print "\033[34m" $0 "\033[39m"}'
endsnippet
snippet cookie
COOKIE="$(/usr/bin/openssl rand -base64 32 | \
       tr -dc 'a-zA-Z0-9' | fold -w 16 | head -n 1)"
endsnippet
snippet cert
echo | openssl s_client -servername google.com -connect google.com:443 |\
  sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p' > certificate.crt
endsnippet
snippet read
read -p "Are you sure? " -n 1 -r
if [[ $REPLY =~ ^[Yy]$ ]]
then
    # do dangerous stuff
fi
endsnippet
