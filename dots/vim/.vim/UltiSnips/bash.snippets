# aws.compute.EC2 (Elastic Compute Cloud)
# aws.management.SSM (Systems Manager)
# aws.network.ELB (Elastic Load Balancing)
# aws.network.VPC (Virtual Private Cloud)
# aws.security.IAM (Identity and Access Management)
snippet aws-iam "aws iam commands"
  aws iam list-roles | jq -c '.Roles[].Arn'
endsnippet
# aws.security.STS (Security Token Service)
snippet aws-sts "aws sts commands"
  aws sts get-caller-identity --output json | jq '.Account' -r
endsnippet
# aws.security.SecretsManager
snippet aws-sm "aws secrets commands"
  aws secretsmanager create-secret --name $SECRET_NAME --secret-string $VALUE
  aws secretsmanager list-secrets | jq -c '.SecretList[].Name'
  aws secretsmanager get-secret-value --secret-id $SECRET_NAME | jq -c '.SecretString | fromjson'
  aws secretsmanager put-secret-value --secret-id $SECRET_NAME --secret-string "$VALUE"
  aws secretsmanager delete-secret --secret-id $SECRET_NAME --force-delete-without-recovery
endsnippet
# aws.storage.S3 (Simple Storage Service)
snippet aws-s3 "aws s3 commands"
  aws s3api list-buckets | jq -c '.Buckets[].Name'
  aws s3api list-objects --bucket $BUCKET_NAME | jq -c '.Contents[].Key'
  aws s3 cp s3://$BUCKET_NAME/$OBJECT_KEY /tmp
  aws s3api get-object --bucket $BUCKET_NAME --key $OBJECT_KEY /tmp/$OBJECT_KEY
endsnippet
# aws.database.RDS (Relational Data Service)
# aws.database.DDB (DynamoDB NoSQL Database)
# aws.integration.SF (StepFunctions)
# aws.integration.SQS (Simple Queue Service)
snippet aws-sqs "aws sqs commands"
  aws sqs list-queues | jq -c '.QueueUrls[]'
  aws sqs send-message --queue-url $QUEUE_URL --message-body file://$EVENT_PATH
endsnippet
# aws.integration.SNS (Simple Notification Service)
snippet aws-sns "aws sns commands"
  aws sns list-topics | jq -c '.Topics[].TopicArn'
  aws sns list-topics --query "Topics[?contains(TopicArn, 'c')].TopicArn | [0]"
  aws sns subscribe --topic-arn <value> --protocol email --notification-endpoint <email>
  aws sns list-subscriptions | jq -c '.Subscriptions[] | select(.Protocol | test("email"))'
  aws sns unsubscribe --subscription-arn <value>
endsnippet
# aws.engagement.SES (Simple Email Service)
# aws.management.CFN (CloudFormation Infrastructure Stack)
snippet aws-cfn "aws cloudformation commands"
  aws cloudformation list-exports | jq -c '.Exports[].Name'
  aws cloudformation describe-stacks | jq -c '.Stacks[].StackName'
  aws cloudformation describe-stacks --stack-name $STACK_NAME | jq -c '.Stacks[].StackStatus'
  aws cloudformation describe-stack-resources --stack-name $STACK_NAME | jq -c '.StackResources[].PhysicalResourceId'
  aws cloudformation delete-stack --stack-name $STACK_NAME
endsnippet
# aws.compute.ECR (Elastic Container Registry)
# aws.compute.ECS (Elastic Container Service)
# aws.compute.Lambda, SAM(Serverless Application Model)
snippet aws-lambda "aws lambda commands"
  pip install -r requirements.txt --target . && zip $(mktemp /tmp/my-function-XXXX.zip) -r ./*
  aws lambda update-function-code --function-name $LAMBDA_NAME --zip-file "fileb://$FILENAME" --publish | jq -r .LastUpdateStatus
  aws lambda update-function-configuration --function-name $LAMBDA_NAME --timeout 30 --memory-size 256 | jq -r .LastUpdateStatus
  aws lambda invoke  --function-name $LAMBDA_NAME --invocation-type RequestResponse --log-type Tail --payload "$(cat $EVENT | base64)" $tmpfile | jq -r .LogResult | base64 --decode
endsnippet
snippet aws-sam "aws sam commands"
  sam build --use-container
  sam deploy --stack-name $STACK_NAME --tags StackName=$STACK_NAME --capabilities CAPABILITY_IAM --no-fail-on-empty-changeset --s3-bucket $BUCKET_NAME --confirm-changeset
endsnippet
# aws.network.CF (CloudFront Delivery Network)
# aws.management.CloudWatch
snippet aws-logs "CloudWatch Observability"
  aws logs describe-log-groups | jq -c '.logGroups[].logGroupName'
  aws logs filter-log-events --log-stream-names $STREAM_NAME --log-group-name $GROUP_NAME --filter-pattern "$MY_QUERY" | jq -r .events[].message
  aws logs filter-log-events --log-group-name $GROUP_NAME --start-time $(date --date="1 day ago" +%s000) --filter-pattern "purchase_id" | jq -c '.events[]'
  aws logs get-log-events --log-group-name $GROUP_NAME --log-stream-name $STREAM_NAME
  aws logs tail $GROUP_NAME --since '10m' --follow --format short
endsnippet
