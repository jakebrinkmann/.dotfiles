snippet sam "sam transform"
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: HTTP API

Resources:
endsnippet
snippet sqs "sqs queue resource"
MyQueue:
  Type: AWS::SQS::Queue
endsnippet
snippet param ""
Parameters:
  lambdaFunctionName:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: qr-function
endsnippet
snippet oapi "sam open api"
  ServerlessRestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name:
        Fn::Sub: ${AppName}-api-${Stage}
      StageName: !Ref Stage
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: swagger.yml
endsnippet
snippet xamz "xamazon"
openapi: 3.0.0

info:
  title: openapi-example
  version: 0.3.0
  description: "This is an example OpenAPI specification"
  termsOfService: "http://example.com/tos"
  contact:
    email: "example@example.com"
x-amazon-apigateway-request-validators:
  all:
    validateRequestBody: true
    validateRequestParameters: true
  params:
    validateRequestBody: true
    validateRequestParameters: true
  body:
    validateRequestBody: true
    validateRequestParameters: false

paths:
  /testFunc:
    get:
      operationId: testFunc
      description: Test sam local functionality with API Gateway & Open API
      x-amazon-apigateway-request-validator: params
      parameters:
        - in: query
          name: testQuery
          description: a test parameter to see how parameters are passed via swagger & API Gateway.
          required: true
          schema:
            type: string
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TestFunction.Arn}/invocations
        httpMethod: POST
        timeoutInMillis: 3000
        type: "aws_proxy"
      responses:
        '200':
          description: A 200 response.
          content:
            application/json:
              schema:
                type: object
        '400':
          description: bad input parameter
endsnippet
snippet xyz
AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: HTTP API for Deciphering QR Codes

Parameters:
  apiGatewayName:
    Type: String
    Default: qr-api
  lambdaFunctionName:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: qr-function

Globals:
  Function:
    Runtime: python3.9
    MemorySize: 128
    Timeout: 30
    Environment:
      Variables:
        USER_POOL_ID: !FindInMap [ AccountMap, !Ref AccountName, UserPoolId ]
        ROLE_TABLE_NAME: !Ref DDBRoles

Resources:
  ServerlessRestApi:
    Type: AWS::Serverless::Api
    Properties:
      EndpointConfiguration:
        type: REGIONAL
      Name: !Ref apiGatewayName
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"
        MaxAge: "'500'"

  ServerlessFunction:
    Type: AWS::Serverless::Function
    Name: !Ref lambdaFunctionName
    Properties:
      CodeUri: aws-qr/
      Handler: index.handler
      Policies:
        - AWSLambdaExecute
      Events:
        GetCodeEvent:
          Type: Api
          Properties:
            Path: /qr-code
            Method: GET
            RestApiId: !Ref ServerlessRestApi

Outputs:
  ServerlessApiEndpoint:
    Description: "API endpoint"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
endsnippet
snippet cond "conditions"
Conditions:
  IsEnvDevelopment: !Equals [ !Ref AccountName, devel ]
  IsEnvProduction: !Not [ !Equals [ !Ref AccountName, devel ] ]

Environment:
- Name: "NODE_ENV"
  Value: !Ref "NodeEnv"
- !If
  - "IsEnvStage"
  - Name: "CORE_URL"
    Value: !Sub "https://staging.${DnsHostedZoneName}"
  - Name: "NCVCORE_URL"
    Value: !Sub "https://${DnsHostedZoneName}"

Conditions:
  UseSnapshotSelected: !Equals [ !Ref UseSnapshot, 'true' ]
Resources:
  DbInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t2.micro
      Engine: mysql
      MasterUsername: !Ref MasterUsername
      MasterUserPassword: !Ref MasterUserPassword
      DBSnapshotIdentifier: !If [ UseSnapshotSelected, !Ref DbSnapshot, !Ref 'AWS::NoValue' ]
endsnippet
# https://github.com/awsdocs/aws-step-functions-developer-guide/blob/master/doc_source/supported-services-awssdk.md
# https://states-language.net/spec.html
# https://github.com/aws/amazon-states-language-service/blob/master/src/snippets/states.json
snippet statemachine
AWSTemplateFormatVersion: "2010-09-09"
Description: "An example template with an IAM role for a Lambda state machine."
Resources:
  LambdaExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"

  MyLambdaFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "index.handler"
      Role: !GetAtt [ LambdaExecutionRole, Arn ]
      Code:
        ZipFile: |
          exports.handler = (event, context, callback) => {
              callback(null, "Hello World!");
          };
      Runtime: "nodejs12.x"
      Timeout: "25"

  StatesExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - !Sub states.${AWS::Region}.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: StatesExecutionPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"

  StateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/stepfunction/${AWS::StackName}-MyStateMachine"
      RetentionInDays: 30

  MyStateMachine:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      DefinitionUri: StateMachine.asl.json
      DefinitionSubstitutions:
        ResourceArn: !GetAtt LambdaFunction.Arn
      Logging:
        IncludeExecutionData: True
        Level: ALL || ERROR
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt OptionsUpdateStateMachineLogGroup.Arn
      Type: STANDARD

      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "A Hello World example using an AWS Lambda function",
              "StartAt": "HelloWorld",
              "States": {
                "HelloWorld": {
                  "Type": "Task",
                  "Resource": "arn:aws:states:::lambda:invoke",
                  "OutputPath": "$.Payload",
                  "Parameters": {
                    "FunctionName": "MapSampleProj-ReadFromSQSQueueLambda-1MY3M63RMJVA9",
                    "Payload":{
                       "model.$":"$.new_model",
                       "token.$":"$$.Task.Token"
                    },
                  },
                  "End": true
                }
              }
            }
          - {lambdaArn: !GetAtt [ MyLambdaFunction, Arn ]}
      RoleArn: !GetAtt [ StatesExecutionRole, Arn ]
endsnippet
