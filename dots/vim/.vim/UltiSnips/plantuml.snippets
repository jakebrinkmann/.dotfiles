snippet umls "plantuml"
@startuml
' https://plantuml.com/sequence-diagram
' https://plantuml-documentation.readthedocs.io/en/latest/diagrams/sequence.html

skinparam Shadowing false

title "__Messages__ - **Sequence** Diagram"

' participant Participant
' collections Collections
:User:
boundary "Web GUI" as GUI
box "Internal Service" #LightBlue
["Shopping Cart"] as SC
entity Widget
database Widgets
' queue Queue
endbox

[-> GUI : Incoming
User -> GUI ++ : To boundary
GUI -> SC : To control
SC -> Widget : To entity
Widget -> Widgets : To database
GUI -> User -- : success
[<- User: Done
note right : this is a note

@enduml
endsnippet

snippet umlc "plantuml"
@startuml
title Classes - Class Diagram

class server1 {
 url: mqtt://localhost:1883
 protocol: mqtt
}
FlightMonitorService --|> server1:flight/update
server1 --|> FlightNotifierService:flight/update
FlightSubscriberService --|> server1:flight/queue
server1 --|> FlightMonitorService:flight/queue
@enduml
endsnippet

snippet umla "plantuml activity"
@startuml
' https://plantuml.com/activity-diagram-legacy
(*) --> if "Some Test" then
  -->[true] "action 1"
  if "" then
    -> "action 3" as a3
  else
    if "Other test" then
      -left-> "action 5"
    else
      --> "action 6"
    endif
  endif
else
  ->[false] "action 2"
endif

a3  --> (*)
@enduml
endsnippet

snippet umle "plantuml ERD"
@startuml
' https://plantuml.com/ie-diagram
skinparam linetype ortho

entity "Entity01" as e01 {
  *e1_id : number <<generated>>
  --
  *name : text
  description : text
}

entity "Entity02" as e02 {
  *e2_id : number <<generated>>
  --
  *e1_id : number <<FK>>
  other_details : text
}

e01 ||..o{ e02
@enduml
endsnippet

snippet umlerd "entity relationship"
@startuml

' hide the label
hide circle

' avoid problems with angled crows feet
skinparam linetype ortho

' make packages not look weird
skinparam packageStyle rectangle

package foo1.foo2 {
note "This is a floating note" as N1
entity Entity01 {
  {static} * identifying_attribute : number <<generated>>
  --
  * <b>mandatory_attribute</b> : text
  optional_attribute : text
}
}

package foo2.foo3 <<Cloud>> {
class "Entity02" as e02 {
  *e2_id : number <<generated>>
  --
  *e1_id : number <<FK>>
  {abstract} other_details : text
}
}

enum TimeUnit {
  DAYS
  HOURS
  MINUTES
}

Entity01 }|.left.|| e02 : OneOrMany to ExactlyOne
Entity03 }o..o| Entity04 : ZeroOrMany to ZeroOrOne
TimeUnit -[hidden]-> Entity03

@enduml
endsnippet

snippet umlm "plantuml MindMap"
@startmindmap
'https://plantuml.com/mindmap-diagram
* root node
** some first level node
***_ second level node
***_ another second level node
***_ foo
***_ bar
***_ foobar
** another first level node
center footer My super footer
@endmindmap
endsnippet

snippet umlc "plantuml component diagram"
@startuml
package "Some Group" {
  HTTP - [First Component]
  [Another Component]
  interface Interf3
}

node "Other Groups" {
  FTP - [Second Component]
  [First Component] --> FTP
}

cloud {
  [Example 1]
}


database "MySql" {
  folder "This is my folder" {
    [Folder 3]
  }
  frame "Foo" {
    [Frame 4]
  }
}


[Another Component] --> [Example 1]
[Example 1] --> [Folder 3]
[Folder 3] --> [Frame 4]
footer //Adding "component" to force diagram to be a **component diagram**//
@enduml
endsnippet
