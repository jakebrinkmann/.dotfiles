snippet puml "basic class diagram"
@startuml
!$a  = 42
class Dummy {
 -square1: uuid4, pk
 #diamond2: str[256], unique
 ~triangle()
 +circle()
}
@enduml
endsnippet

snippet tree "plantuml creole tree"
@startuml
class Foo {
  **Bar (Model)**
  |_ prop
  |_ **Bom (Model)**
    |_ prop2
    |_ prop3
      |_ prop3.1
  |_ prop4 :(
  --
}
@enduml
endsnippet

snippet umls "plantuml"
@startuml
' https://plantuml.com/sequence-diagram
' https://plantuml-documentation.readthedocs.io/en/latest/diagrams/sequence.html

' participant Participant
' collections Collections
:User:
boundary "Web GUI" as GUI
box "Internal Service" #LightBlue
["Shopping Cart"] as SC
entity Widget
database Widgets
' queue Queue
endbox

[-> GUI : <back:red><color:white>1. incoming
note on link #White
<code>
  POST /v1/token
end note
User -> GUI ++ : To boundary
GUI -> SC : To control
SC -> Widget : To entity
Widget -[bold]> Widgets : To database
GUI -> User -- : success
[<- User: Done
note right : this is a note
note bottom of
  this note is on
  several lines
end note

@enduml
endsnippet

snippet umlc "plantuml"
@startuml

class server1 {
 url: mqtt://localhost:1883
 protocol: mqtt
}
FlightMonitorService --|> server1:flight/update
server1 --|> FlightNotifierService:flight/update
FlightSubscriberService --|> server1:flight/queue
server1 --|> FlightMonitorService:flight/queue
@enduml
endsnippet

snippet umla "plantuml activity"
@startuml
' https://plantuml.com/activity-diagram-legacy
(*) --> if "Some Test" then
  -->[true] "action 1"
  if "" then
    -> "action 3" as a3
  else
    if "Other test" then
      -left-> "action 5"
    else
      --> "action 6"
    endif
  endif
else
  ->[false] "action 2"
endif

a3  --> (*)
@enduml
endsnippet

snippet umle "plantuml ERD"
@startuml
' https://plantuml.com/ie-diagram

entity "Entity01" as e01 {
  *e1_id : number <<generated>>
  --
  *name : text
  description : text
}

entity "Entity02" as e02 {
  *e2_id : number <<generated>>
  --
  *e1_id : number <<FK>>
  other_details : text
}

e01 ||..o{ e02
@enduml
endsnippet

snippet umlerd "entity relationship"
@startuml
hide private members
hide public members

hide entity fields
hide object stereotypes

' hide the label
hide circle

package foo1.foo2 {
note "This is a floating note" as N1
entity Entity01 {
  {static} * identifying_attribute : number <<generated>>
  --
  * <b>mandatory_attribute</b> : text
  optional_attribute : text
}
}

package foo2.foo3 <<Cloud>> {
class "Entity02" as e02 {
  *e2_id : number <<generated>>
  --
  *e1_id : number <<FK>>
  {abstract} other_details : text
}
}

enum TimeUnit {
  DAYS
  HOURS
  MINUTES
}

Entity01 }|.left.|| e02 : OneOrMany to ExactlyOne
Entity03 }o..o| Entity04 : ZeroOrMany to ZeroOrOne
TimeUnit -left[hidden]-> Entity03

' <|-- Extension
' *-- Composition
' o-- Aggregation
@enduml
endsnippet

snippet pumlerd "plantuml classes with specific links"
@startuml
!include db_organizations_model.puml
!include db_projects_model.puml
!include db_needs_model.puml

Needs::project -> Projects::id
Projects::organizations -> Organizations::id
@enduml
endsnippet

snippet umlm "plantuml MindMap"
@startmindmap
'https://plantuml.com/mindmap-diagram
+ OS
++ Ubuntu
+++ Linux Mint
+++_ Kubuntu
++_ LMDE
--_ Windows 98
-- Windows NT
--- Windows 10
@endmindmap
endsnippet

snippet notes "plantuml braindump"
@startmindmap

+ **myThoughts**
++ Thought 1
'tag::details[]
+++_ Thought 1.1
+++_ Thought 1.2
'end::details[]
++ Thought 2
++ Thought 3

'tag::left[]
-- Thought A
-- Thought B
-- Thought C
'end::left[]

@endmindmap
' +-bullets will be rendered as thoughts to the right
' --bullets to the left, 
' underscore _ to omit the box
endsnippet

snippet pumlhide "plantuml hide"
@startuml
hide <<tag>>
class bob <<tag>>{
}
class joe{
}
@enduml
endsnippet

snippet umlc "plantuml component diagram"
' https://plantuml.com/component-diagram
@startuml
package "Some Group" {
  HTTP - [First Component]
  [Another Component]
  interface Interf3
}

node "Other Groups" {
  FTP - [Second Component]
  [First Component] ..> FTP
}

together {
    [PostgreSQL database] as PostgresDB <<Database>>
    [Mail server] as Mail <<Mail server>>
}

cloud {
{{json
{"name": "component c1",
"color": ["normal", "green", "red"],
"visible": true}
}}
}


database "MySql" {
  folder "This is my folder" {
    [Folder 3]
  }
  frame "Foo" {
    [Frame 4]
  }
}


[Another Component] --> [Example 1]  #Blue
[Example 1] ---> [Folder 3]  #Blue
[Folder 3] -> [Frame 4]  #Blue
footer //Adding "component" to force diagram to be a **component diagram**//
' package node folder frame cloud database
legend
    | Color | Flow |
    |<#Red>|  Flow 1 |
    |<#Blue>|  Flow 2 |
endlegend
@enduml
endsnippet
snippet trigger "description"
@startuml
allow_mixing
' :actor:
' [component]
' () "interface"
' (usecase)
actor actor
agent agent
artifact artifact
boundary boundary
card card
cloud cloud
collections collections
component component
control control
database database
entity entity
file file
folder folder
frame frame
hexagon hexagon
interface  interface
label label
node node
package package
person person
queue queue
stack stack
rectangle rectangle
storage storage
usecase usecase
@enduml
endsnippet
snippet umli "plantuml with icons"
' https://plantuml.com/stdlib
@startuml
'Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.
'SPDX-License-Identifier: MIT (For details, see https://github.com/awslabs/aws-icons-for-plantuml/blob/master/LICENSE)

!include <awslib/AWSCommon>

' Uncomment the following line to create simplified view
' !include <awslib/AWSSimplified>

!include <awslib/General/Users>
!include <awslib/Mobile/APIGateway>
!include <awslib/SecurityIdentityAndCompliance/Cognito>
!include <awslib/Compute/Lambda>
!include <awslib/Database/DynamoDB>

left to right direction

Users(sources, "Events", "millions of users")
APIGateway(votingAPI, "Voting API", "user votes")
Cognito(userAuth, "User Authentication", "jwt to submit votes")
Lambda(generateToken, "User Credentials", "return jwt")
Lambda(recordVote, "Record Vote", "enter or update vote per user")
DynamoDB(voteDb, "Vote Database", "one entry per user")

sources --> userAuth
sources --> votingAPI
userAuth <--> generateToken
votingAPI --> recordVote
recordVote --> voteDb
@enduml
endsnippet
snippet umlc "plantuml colors"
' https://plantuml-documentation.readthedocs.io/en/latest/formatting/all-skin-params.html
@startuml
title "__Messages__ - **Sequence** Diagram"
title
  hello
end title
center header Generated for demonstration
top to bottom direction
autonumber
skinparam DefaultFontSize 18
skinparam monochrome true
skinparam Shadowing false
skinparam linetype ortho
skinparam packageStyle rectangle
skinparam responseMessageBelowArrow true
skinparam nodesep 5
colors
footer Generated on %date[dd-MM-yyyy]%
skinparam package<<Layout>> {
  borderColor Transparent
  backgroundColor Transparent
  fontColor Transparent
  stereotypeFontColor Transparent
}
skinparam actorBorderColor<<customer>> #Red
skinparam actorBorderColor<<consumer>> #Blue
skinparam boundaryBorderColor<<ehr>> #Green
#Orange #ffdfba
#Pink #ffd4e5
#Cyan #d4ffea
#Purple #eecbff
#Yellow #feffa3
#Green #e1f7d5
#Blue #c9c9ff
#Red #ffbdbd
@enduml
endsnippet
snippet state "plantuml statemachine activity"
@startuml
start
while (App) is (running)
  :enter username;
  repeat
    :enter password;
    if (Password correct?) then (yes)
      :Play game;
      stop
    endif
  repeat while (Third attempt?) is (no) not (yes)
endwhile (exit)
stop
@enduml
endsnippet
